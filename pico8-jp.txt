============================================================================================

 PICO-8 v0.1.8
 http://www.pico-8.com
 (c) Copyright 2014-2016 Lexaloffle Games LLP
 Author: Joseph White // hey@lexaloffle.com

 PICO-8 is built with:
 	SDL2 http://www.libsdl.org
 	Lua 5.2 http://www.lua.org  // see license.txt
 	GIFLIB http://giflib.sourceforge.net/

============================================================================================

PICO-8へようこそ！

  PICO-8は小さなゲームやプログラムを作って、共有したり、プレイするための架空のゲーム機です。
  PICO-8を起動させると、Luaプログラムを直接入力できるシェルが立ち上がり、スプライト、マップ、
  サウンドを作成するためのツールが提供されます。

  PICO-8の厳しい制限は、使っていて楽しく、小さいけれど表現力に富んだデザインを奨励し、願わくば
  それぞれのPICO-8カートリッジが個性的なルック＆フィールになるように注意深く選択されています。


:: キー操作

	フルスクリーン切り替え: ALT+ENTER
	終了: ALT+F4 または command-Q
	カートリッジの再読み込み/実行/再スタート: Ctrl+R
	クイックセーブ: Ctrl+S
	P: ポーズ (実行中)
	プレイヤー1 デフォルト操作: カーソルキー + ZX / NM / CV
	プレイヤー2 デフォルト操作: SDFE + TAB,Q / SHIFT A
	// デフォルト操作を変更するにはKEYCONFIGを編集してください


:: 仕様

	画面: 128x128、16色固定パレット
	入力: 6ボタン
	カートリッジサイズ: 32k
	サウンド: 4チャンネル、64サウンド
	コード: Lua (最大8192トークン)
	スプライト: シングルバンク 8x8 128スプライト (＋マップと共有の128スプライト)
	マップ: 128x32 8ビットセル (＋スプライトと共有の128x32セル)


:: Hello World

  PICO-8を起動したら、以下のいくつかのコマンドを入力してENTERキーを押してみましょう。

		PRINT("HELLO WORLD")
		RECTFILL(80,80,120,100,12)
		CIRCFILL(70,90,20,14)
		FOR I=1,4 DO PRINT(I) END

	(注意: PICO-8は大文字のみを表示します -- Capsキーを押さずに普通に入力してください!)

  このようなコマンドを、コードエディターモードで_updateや_drawなどの特殊コールバック関数と組み
  合わせることで、操作可能なプログラムを作成することができます。例えば、次のプログラムはカーソル
  キーで円を動かします。ESCAPEキーでコードエディターに切り替えて、以下のコードを入力またはコピー
  ＆ペーストしてみてください。

	X = 64  Y = 64
	FUNCTION _UPDATE()
	 IF (BTN(0)) THEN X=X-1 END
	 IF (BTN(1)) THEN X=X+1 END
	 IF (BTN(2)) THEN Y=Y-1 END
	 IF (BTN(3)) THEN Y=Y+1 END
	END

	FUNCTION _DRAW()
	 RECTFILL(0,0,127,127,5)
	 CIRCFILL(X,Y,7,8)
	END

  ESCAPEキーを押してメインコンソールに戻り、実際に動くところをRUNと入力して確認してみてください。
  より複雑なプログラムについてはサンプルカートリッジを参考にしてみてください。


:: サンプルカートリッジ

  PICO-8には以下のカートリッジが含まれており、次のコマンドでインストールできます。
	INSTALL_DEMOS
	CD DEMOS

	API        PICO-8の大部分の機能をデモします
	JELPI      2プレイヤー対応のプラットフォームゲームデモ
	CAST       2.5D レイキャスターデモ
	MANDEL     マンデルブロー描画
	COLLIDE    壁とキャラクターの衝突判定サンプル
	BUTTERFLY  シェルピンスキーのフラクタル三角形描画
	DRIPPY     滴る曲線の描画
	STOMPY     ミュージックカートリッジ
	WOO        ミュージックカートリッジ

  カートリッジを実行するには、PICO-8を起動して次のように入力します。

	LOAD JELPI
	RUN

  ESCAPEキーでプログラムを停止して、もう一度エディターモードに入ってみてください。


:: ファイルシステム

  ファイルやディレクトリ(フォルダ)の管理には以下のコマンドを使用します。

	DIR        現在のディレクトリの内容一覧を表示します
	CD BLAH    ディレクトリを変更します
	CD ..      一つ上の階層のディレクトリに移動します
	CD /       (PICO-8の仮想ドライブの)一番上のディレクトリに移動します
	MKDIR      ディレクトリを作成します
	FOLDER     ホストOSのファイルブラウザで現在のディレクトリを開きます

	LOAD BLAH  現在のディレクトリからカートリッジを読み込みます
	SAVE BLAH  現在のディレクトリにカートリッジを保存します

  ファイルの移動、複製、削除をしたい場合は、FOLDERコマンドを使ってホストOS上で操作するのが
  最も良い方法です。

  PICO-8のドライブのデフォルト位置は以下になります。

	Windows: C:/Users/Yourname/AppData/Roaming/pico-8/carts
	OSX: /Users/Yourname/Library/Application Support/pico-8/carts
	Linux: ~/.lexaloffle/pico-8/carts

  pic-8/config.txtを編集することでドライブ位置やその他の設定を変更できます。

  コツ: もしあなたがDropboxユーザーであれば、ドライブ位置をDropboxの共有フォルダに設定することで、
  他のホストマシンのPICO-8とドライブを共有することができます。


:: バックアップ

  保存せずに終了したり、既存のファイルを上書きした場合、カートリッジのバックアップがpico-8/backupに
  作成されます。


:: 設定

	:: config.txt

    config.txtに設定が書かれています。PICO-8が動作していない時に編集してください。

		Windows: C:/Users/Yourname/AppData/Roaming/pico-8/config.txt
		OSX: /Users/Yourname/Library/Application Support/pico-8/config.txt
		Linux: ~/.lexaloffle/pico-8/config.txt

    -homeオプション(後述)でconfig.txtやその他のデータの参照位置を変更することができます。


	:: コマンドライン引数

    // 注意: これらの引数はconfig.txtの設定を上書きします

		pico-8 [オプション] [ファイル名.p8]

		-run           起動時にファイル名.p8を開始します
		-width n       ウィンドウまたは画面の幅を設定し、スケール指定がなければ一致するようにスケールを調整します
		-height n      ウィンドウまたは画面の高さを設定し、スケール指定がなければ一致するようにスケールを調整します
		-scale n       PICO-8のピクセルのサイズを設定します。"-scale 3"ならピクセルは3x3のサイズで描画されます
		-windowed n    0なら非ウィンドウモードに、1ならウィンドウモードにします
		-sound n       0-255の範囲で音量を設定します
		-music n       0-255の範囲で音量を設定します
		-joystick n    ジョイスティック操作をプレイヤー番号n(0-7)から開始します
		-aspect n      アスペクト比を設定します。420は1:1(デフォルト)を意味し、560なら4:3、525なら5:4になります
		-run filename  自動でカートリッジを読み込み実行します
		-splore        SPLOREモードで起動します
		-home path     config.txtやその他のユーザーデータの参照位置を指定します
		-gif_len n     アニメGIFの最大長さを秒単位(1-120)で指定します


	:: コントローラー設定

    PICO-8はSDL2のコントローラーの設定方法を使用しています。この方法は、起動時に一般的なコント
    ローラーを見つけ、config.txtと同じディレクトリのsdl_controllers.txtにあるボタン割り当て
    を探します。sdl_controllers.txtは一行に一つのボタン割り当てを記述します。

    独自のボタン割り当てを作成するには、SDL2に付属するcontrollermapプログラムか、
    http://www.generalarcade.com/gamepadtool/ を使用してください。

    どのキーボードのキーをジョイスティックのボタンに割り当てるかを設定するには、KEYCONFIGを使用
    します。


:: カートリッジの共有 / HTML5出力

	カートリッジを共有する方法は3つあります。

    1. .p8または.p8.pngファイルディレクトリを他のPICO-8ユーザーと共有する

    2. カートリッジをLexaloffe BBSに投稿してWebブラウザ版を取得する

			http://www.lexaloffle.com/pico-8.php?page=submit

    .p8.png版の作成方法はsave()の説明を参照してください。(.pngで検索すると見つかります)

    3. スタンドアロンのhtml5版カートリッジを出力する

			EXPORT FOO.HTML

      このコマンドはfoo.htmlとfoo.jsの2つのファイルを作成します。(2ファイルとも必須です!)

      作者と貢献者の許可さえあれば、自由に出力されたカートリッジの利用や配布ができます。

      .htmlファイルは必要に応じて修正するためのテンプレートとなっています。.htmlファイルには
      設定変更のボタンと外部のウェブサイトへのリンク(デフォルトではPICO-8 BBSのカートリッジ
      ページ)、プレイ中にWebページがスクロールするのを防ぐための、キー入力をブロックする
      JavaScriptが含まれています。

      プレイ画面の幅と高さは変更可能ですが、通常は表示されるcanvasのサイズと一致している必要が
      あることに注意してください(デフォルトは580x540)。


:: スクリーンショット、動画、カートリッジラベル

  カートリッジ動作中に以下のコマンドが使用できます。

		F6 デスクトップにスクリーンショットを保存する
		F7 カートリッジラベル画像をキャプチャする
		F8 動画の録画を開始する
		F9 デスクトップにアニメGIFを保存する(デフォルトでは最大8秒)

		// F6-F9が使えない環境では、F1-F4を使用してください

  save()コマンドでp8.pngフォーマットを指定するとカートリッジラベルが保存されます。

  (常に録画されているため)いつでも動画を保存することが可能です。8秒以下の動画を撮影したい場合は
  F8キーで録画の開始位置をリセットしてください。

  アニメGIFの最大長さを変更するには、config.txtのgif_lenで録画時間の秒数を指定します。
  GIFフォーマットは30fpsちょうどに対応していないため、PICO-8は代わりに最も近い33.3fpsを使用
  しています。


:: エクスポーター / インポーター

	1. スプライトシートを.pngファイルから取り込み、または出力するには次のコマンドを使用します

		import("blah.png")    --  128x128のpngファイルとして読み込み、色をPICO-8のパレットに合わせます
		export("blah.png")    --  folder()をpngファイルの出力位置の指定に使用します

	2. 効果音やミュージックの出力には次のコマンドを使用します

		export("blah.wav")    --  (ミュージックエディターモードの)現在のパターンから音楽を出力します
		export("blah.wav")    --  (SFXエディターモードの)現在のSFXを出力します
		export("blah%d.wav")  --  すべてのSFXをblah0.wav, blah1.wav .. blah63.wavとして出力します

    // コマンドラインでは、EXPORT BLAH.WAVのように括弧やクォーテーションを省略できます


:: PICO-8の特殊な点

	以下のような特殊な点に注意してください。

  - スプライトシートの後ろ半分とマップの後ろ半分は同じメモリに割り当てられています
    // どのように動作するかよくわからない場合は、どちらか片方だけを使用するのがよいでしょう
  - PICO-8の数値は32767.99までしか扱えません
    // 毎フレームカウンターに1を足すと、18分後にはオーバーフローを起こします!
  - Luaの配列はデフォルトでは0ではなく1から開始されます。FOREACHはT[0]ではなくT[1]から始まります
  - cos()とsin()は0-PI*2の代わりに0-1の値を取り、sin()の値は反転しています
  - sgn(0)は1を返します
  - Macでフルスクリーンを切り替えるにはALT-ENTERを使用します(CMD-Fはテキストの検索に使用されます)
  - .pngカートリッジを出力したい場合はEXPORTではなくSAVEを使用します。EXPORTはスプライトシートだけを保存します!


:: SPLOREモード

  SPLOREはローカルとBBS(オンライン)のカートリッジを閲覧、管理するためのユーティリティです。
  SPLORE[ENTER]と入力するか、-sploreオプションをつけてPICO-8を起動することで利用できます。

  SPLOREのすべての操作をジョイスティックで行うことが可能です。
  左ボタンと右ボタンでカートリッジのリストを移動します
  上ボタンと下ボタンで各リストのアイテムを選択します
  Xボタン、Oボタン、MENUボタンでカートリッジを起動します

  カートリッジリストの中でMENUボタンを押すとカートリッジをお気に入り登録するか、SPLOREを終了させる
  ことができます。キーボードの場合は、カートリッジリストでアイテムが選択されている時にFキーでお気に入り
  に登録できます。

  BBSのカートリッジリスト閲覧中は、リストアイテムの先頭をカートリッジのリストの再ダウンロードに
  使用します。オフライン時は、最後にダウンロードされたリストが表示され、ダウンロード済みのカート
  リッジを引き続きプレイすることができます。

  インターネット環境のないマシンにPICO-8をインストールした場合も、INSTALL_GAMESコマンドで
  あらかじめインストールされているいくつかのBBSカートリッジをお気に入りリストに追加することが
  できます。


============================================================================================
	エディターモード
============================================================================================

  コンソールとエディターを切り替えるにはESCAPEキーを押します。
  編集モードーを切り替えるには、右上のエディターモードタブをクリックするか、ALT+左キー/右キーを
  押してください。


  ** 注意: スプライトシートの後ろ半分(バンク2と3)とマップの後ろ半分はカートリッジの同じデータ領域を
  共有しています。そのデータ領域をどう使うかはあなた次第ですが、スプライトシートの後半に書き込むと
  マップデータが破壊され、その逆も発生します。


:: コードエディター

  シフトキーを押すと(またはマウスでクリック&ドラッグすると)領域を選択します
  CTRL-X、C、Vで選択領域をカット、コピー、ペーストします
  CTRL-Z、Yでアンドゥ(編集の取り消し)とリドゥ(編集の再実行)します
  CTRL-Fでテキストを検索します
  CTRL-Gで最後の検索を繰り返します
  ALT-UP、DOWNで直前と直後の関数に移動します

  コードエディターの右下で使用されているトークン数を確認することができます。1つのプログラムは最大
  8192トークンを使用できます。各トークンは単語(変数名等)または演算子です。左右括弧のペアや文字列は
  1トークンとしてカウントされます。カンマ、ピリオド、LOCALキーワード、セミコロン、ENDキーワード、
  コメントはカウントされません。

  ボタン用の特殊文字を入力するにはSHIFT-L、R、U、D、O、Xを使用します。


:: スプライトエディター

  スプライトエディターではスプライト単位の編集と制限のないピクセル単位の編集の両方が行なえます。
  画面下部のスプライトナビゲーターでスプライトシートの8x8単位での参照が可能ですが、より大きな
  サイズや奇数のサイズを扱いたい場合は、自由形状ツール(パン、選択)を使うこともできます。

	ドローツール
    スプライト上でクリック&ドラッグで編集します
    見える範囲に適用されます
    CTRLキーを押していると描画先と同じ色を探してすべて置き換えます
    色を選択するには左マウスボタンを使用します

	スタンプツール
    どこでもクリックするとスタンプを押します(?)
    左CONTROLキーを押していると透明色つきでスタンプを押します

	選択ツール // ショートカット: 左SHIFTまたはSキー
    選択領域を作成する
    ENTERキーまたはクリックで非選択状態になります

    ピクセル単位の選択でない場合は、多数の操作が代わりにスプライト単位の選択領域に適用されます。
    複数スプライトを選択するにはスプライトナビゲーターでSHIFTドラッグします。

	パンツール // ショートカット: SPACEキー
    スプライトシートを閲覧します。

	塗りつぶしツール
    現在の色で塗りつぶします
    現在の選択領域に適用します
    どこも選択されていなければ、見える範囲に適用されます

	特別キー
		CTRL-Zでアンドゥします // 0.2.0では1度だけ有効です
		CTRL-Cで選択領域または選択したスプライトをコピーします
		CTRL-Vで現在のスプライト位置にペーストします
		QキーとWキーで直前と直後のスプライトに切り替えます
		1キーと2キーで直前と直後の色に切り替えます
    TABキーでフルスクリーン表示を切り替えます
    マウスホイールでズームします(フルクリーン表示では中央中心でズームします)


	選択領域または選択したスプライトの操作方法
		Fキーで左右反転
		Vキーで上下反転
		Rキーで回転(選択領域が正方形である必要があります)
		カーソルキーで移動(スプライト選択時は循環します)

	スプライトフラグ
    8色の円は現在のスプライトのスプライトフラグです。
    各フラグはtrue(オン)かfalse(オフ)にでき、FSET関数とFGET関数でアクセスできます。
    スプライトフラグは0から番号が振られており、左から(0,1,2..7)となります。詳細はfset()の説明を
    参照してください。


:: マップエディター

  PICO-8のマップは8ビットの値を持つ128x32(または共有データを使った128x64の)のブロックです。
  各値はスプライトへの参照(0-255)として表示されますが、任意の何かを表すデータとしても使用できます。

  ツールはスプライト編集モードで使われているものと同じです。スプライトを選択してクリック&ドラッグで
  マップに描画してください。

  複数のスプライトを描画するには、スプライトナビゲーターでSHIFTドラッグで選択します
  値のブロックをコピーするには選択ツールでコピーした後にスタンプツールでペーストします
  マップを移動sするにはパンツールを使うかSPACEキーを押します
  QキーとWキーで直前と直後のスプライトに移動します。


:: SFXエディター

  カートリッジ1つにつきサウンドとミュージックで共用する64のSFX(効果音)があります。

  SFXは32のノートを持ち、各ノートは以下の要素を持っています。
		周波数            (C0-C5)
		インストゥルメント  (0-7)
		音量              (0-7)
		エフェクト         (0-7)

  SFXは以下の属性も持っています。

    再生速度(SPD): ノートを再生する長さのティック数(フレーム数)
      // 1が最も短く3は3倍長くなります

    ループ開始位置と終了位置 : 一巡して戻ってくる位置とループ再生する終端位置です
      // ループはstart indexがend index以上だとオフになります

  SFXの閲覧や確認をするために2つのモードがあります: ピッチモード(効果音向け)とトラッカー
  モード(音楽向け)です。左上のボタンかTABキーによるトグルで切り替えることができます。


  1. ピッチモード

    ピッチエリアをクリックとドラッグすることで現在選択している音色(色で示されます)を
    使って各ノートの周波数を設定します。

    シフトを押しながらだと選択された音色のみを適用します
    CTRLを押しながらだと音色をCマイナーペンタトニックスケールにスナップします。


  2. トラッカーモード

    各ノートは次の要素を表示しています: 周波数 オクターブ 音色 音量 エフェクト
    ノートを入力するには、q2w3er5t6y7ui zsxdcvgbhnjm (ピアノ風レイアウト)を使います
    新しいノートには選択されている音色/エフェクトが使用されます
    ノートを削除するには、バックスペースを押すかボリュームを0に設定してください

    クリックとシフトクリックによる範囲選択でコピー(CTRL-C)とペースト(CTRL-V)が可能です。


	3. 両モードの操作方法

    -と+キーで現在のSFXをナビゲートします。
    <と>キーでスピードを変化させます
    スペースキーで再生/停止をします
    Aキーでサンプルのループをリリースします
    クリックまたは左クリックでSPDまたはLOOPの値を増加/現象させます。
     // クリック時にシフトを押していると4ずつ増加/減少させます
     // もう一つの方法として、クリック&ドラッグで左右または上下させます
    音色、エフェクト、音量をシフトクリックすることですべての音に適用できます


	:: エフェクト

		0 なし(None)
		1 スライド      //  次のノートまでスライドさせます
		2 ビブラート    //  高速にピッチを1/4音の範囲で変化させます
		3 ドロップ      //  高速に周波数を低い値まで落とします
		4 フェードイン   //  音量を0から徐々に上げます
		5 フェードアウト //  音量を0へ徐々に下げます
		6 高速アルペジオ //  スピード4で4ノートを繰り返します
		7 低速アルペジオ //  スピード8で4ノートを繰り返します

    もしSFXのスピードが8以下なら、アルペジオのスピードは2や4に半減されます。


:: ミュージックエディター

  PICO-8の音楽はパターンのシーケンスでコントロールされます。それぞれのパターンはどのSFXをその
  チャンネルで再生するかを示す4つの数字のリストになります。


	:: フローコントロール

    プレイバックフローは右上の3つのボタンを使って操作します。

    パターンの再生が終わった時、以下に該当しなければ次のパターンを再生します。

    - 再生する残りデータがない(音楽は止まります)
    - そのパターンにSTOPコマンドがセットされている(最初のボタン)
    - LOOP BACKコマンド(3つ目のボタン)がセットされていると、LOOP START(2番目のボタン)がセットされている
      以前のパターンを探し、あるいは何も見つからなければパターン0に戻ります

    パターンが異なるスピードのSFXを持っている場合、パターンは最も左のループではないチャンネルが
    再生を終えた時に終了します。これは変則的な拍子記号や倍速のドラムビートなどを構成するのに用います。


	:: カートリッジ間での音楽のコピー

    パターンの範囲選択: パターンナビゲーターの最初のパターンを一度クリックし、最後のパターンを
    シフトクリックする。選択されたパターンはCTRL-CとCTRL-Vでコピーやペーストできます。他のカートリッジ
    にペーストされるとき、もしそのパターンが参照しているSFXが存在しなければ、そのSFXもペーストされます。
    (異なる番号になる場合があります)


============================================================================================
	Lua入門
============================================================================================

PICO-8のプログラムはLua言語の文法で記述しますが、Luaの標準ライブラリは使用しません。
以下はLuaで必須となる文法の簡単な要約です。

より詳細や適正なLuaを知りたい場合は、www.lua.orgを見てください。

:: コメント

  -- 行末までを無視させるにはこのように2つのハイフン(-)を使ってください
	--[[ 複数行の
	コメントです ]]


:: 型と代入

  Luaの型には数値、文字列、ブーリアン(真偽値)、テーブルがあります。

	NUM = 12/100
	S = "THIS IS A STRING"
	B = FALSE
	T = {1,2,3}

  PICO-8の数値はすべて16:16の固定小数です。その範囲は-32768.0 to 32767.99です。

  オプションの小数部を持った16進数記述も使えます。
		0x11        -- 17
		0x11.4000   -- 17.25

  ゼロ除算は(0x7fff.ffff)最大の数値として評価されます。

:: 条件分岐

	IF NOT B THEN
		PRINT("B IS FALSE")
	ELSE
		PRINT("B IS NOT FALSE")
	END

	-- ELSEIFありの場合

	IF X == 0 THEN
		PRINT("X IS 0")
	ELSEIF X < 0 THEN
		PRINT("X IS NEGATIVE")
	ELSEIF X > 0 THEN
		PRINT("X IS POSITIVE")
	ELSE
		PRINT("THIS IS LINE IS NEVER REACHED")
	END

	IF (4 == 4) THEN PRINT("EQUAL") END
	IF (4 ~= 3) THEN PRINT("NOT EQUAL") END
	IF (4 <= 4) THEN PRINT("LESS THAN OR EQUAL") END
	IF (4 > 3) THEN PRINT("MORE THAN") END

:: ループ

	FOR X=1,5 DO
		PRINT(X)
	END
	-- prints 1,2,3,4,5

	X = 1
	WHILE(X <= 5) DO
		PRINT(X)
		X = X + 1
	END

	FOR X=1,10,3 DO PRINT(X) END   -- 1,4,7,10

	FOR X=5,1,-2 DO PRINT(X) END  -- 5,3,1


:: 関数とローカル変数

	Y=0
	FUNCTION PLUSONE(X)
		LOCAL Y = X+1
		RETURN Y
	END
	PRINT(PLUSONE(2)) -- 3
	PRINT(Y)          -- 0


:: テーブル

  Luaのテーブルは型が混合可能なキーと値のペアのコレクションです。整数のインデックスをキーにすることで
  配列としても使用できます。

	A={} -- create an empty table
	A[1] = "BLAH"
	A[2] = 42
	A["FOO"] = {1,2,3}

	-- デフォルトでは常に1から始まる配列になります

	A = {11,12,13,14}
	PRINT(A[2]) -- 12

	-- 1から始まるインデックスつきのテーブルのサイズ

	PRINT(#A)   -- 4

	-- 文字列のインデックスはドット(.)記法を使用できます

	PLAYER = {}
	PLAYER.X = 2 -- PLAYER["X"]と同じです
	PLAYER.Y = 3

	-- 後述のAPIリファレンスのテーブルセクションも産業してください


:: PICO-8向け速記法

  PICO-8にはいくつかの標準にはない一般的なパターンの略記法があります。

  1. 1行のIF THEN END構文はTHENとENDを省略可能です

	IF (NOT B) I=1 J=2

	-- is equivalent to: IF (NOT B) THEN I=1 J=2 END
  -- 等しいか判定する: IF (NOT B) THEN I=1 J=2 END
	-- 条件は常に括弧で括られている必要があることに注意してください


	2. 単項演算子

	a += 2  -- equivalent to: a = a + 2
	a -= 2  -- equivalent to: a = a - 2
	a *= 2  -- equivalent to: a = a * 2
	a /= 2  -- equivalent to: a = a / 2
	a %= 2  -- equivalent to: a = a % 2


	3. !=演算子

  速記法ではありませんが、PICO-8は"異なる値"を表すために~=に加えて!=も許容します。


============================================================================================
	APIリファレンス
============================================================================================

  PICO-8はLuaスクリプト言語で開発しますが、Lua標準ライブラリは含んでいません。代わりにPICO-8の最小の仕様と
  限定された画面サイズを踏まえた小さなAPIを提供しています。APIの大部分を使用している参考プログラムとしては、
  /DEMOS/API.P8をご覧ください。

  ここで説明される関数は次の形式で書かれています。
	関数名 引数 [オプション引数]

  コマンドラインから使用されるシステム関数は通常の括弧と文字列のクォーテーションを省略できます。
	load blah.p8 --> load("blah.p8")


--------------------------------------------------------------------------------------------------------
	システム
--------------------------------------------------------------------------------------------------------


load filename
save filename
	カートリッジを読み込み、または保存します

  png形式で保存する場合は".png"を付けてください -- 指定のない場合はテキスト形式(".p8")が使われます

  量形式とも".p8"は省略可能で、自動で付加されます
		save("blah") --> save("blah.p8")
		save("blah.png") --> save("blah.p8.png")
		load("blah.png") --> load("blah.p8.png") (blah.pngが存在しない場合)

  読み込みについても同様です。対象ファイルが見つからない場合、PICO-8は".p8"を挿入して再試行します。

	The ".png" can also be omitted, but only when loading
  読み込みのみ".png"も省略可能です
    load ("blah") --> "blah.p8"が存在しない場合、"blah.p8.png"の後に"blah.png"を試みます

  一度カートリッジが読み込みまたは保存されると、CTRL-Sでクイックセーブできるようになります


  :: テキストラベルとプレビュー画像つきでの.pngカートリッジの保存

  カートリッジとセットで保存されるプレビュー画像を作成するには、プログラムを実行してF7を押して
  画面の表示内容を取得してください。'--'で始まる最初の2行はカートリッジのラベルとして表示されます。

  例:
	-- OCEAN DIVER LEGENDS
	-- BY LOOPY


  :: .png形式でのコードサイズ制限

  .png形式で保存する際、圧縮されたコードのサイズは15360バイト以下である必要があります。コードの現在の
  サイズを知るには、INFOコマンドを使用してください。圧縮済みサイズ制限は.p8形式で強制されません。
  ほとんど場合トークン数制限(8192)の方に先に到達するため、圧縮済みサイズを気にする必要はないでしょう。


folder
  ホストOS上でカートリッジフォルダーを開きます

ls
  現在のフォルダーのすべてのファイルを表示します

run
  プログラムの先頭から実行します
  プログラムをリセットするためにプログラム内部から呼ぶことが可能です

resume
  既存のカートリッジ状態から起動します (型破りな方法です)

reboot
  マシンを再起動します
  新しいプロジェクト開始する際に有用です

stat x
  x:0 現在のLuaのメモリ使用状況(0-1024MB)を返します
  x:1 最後に実行されたフレームのCPU使用状況を返します(1.0は30fpsで100%を意味します)

info
  以下のカートリッジ情報を表示します。
	コードサイズ、トークン数、圧縮済みサイズ

flip
  バックバッファを画面に表示し、次のフレームを待ちます (30fps)
  通常は使用しないでください -- _draw()関数が代わりに呼びます

  プログラムがフレームの終了前にflipコマンドを呼べず、_draw()コールバックが実行中
  でない場合、バックバッファの現在の内容が画面にコピーされます。

printh str
  デバッグ用にホストOSのコンソールに文字列を表示します。


--------------------------------------------------------------------------------------------
	プログラム構造
--------------------------------------------------------------------------------------------

  ユーザーが定義すると、プログラム実行中に呼び出される3つの特殊な関数があります。

		_update()
      30fpsの更新タイミング毎に呼ばれます

		_draw()
      画面を表示タイミング毎に呼ばれます

		_init()
      プログラム開始時に一度だけ呼ばれます


  _draw()は通常30fpsで呼ばれますが、間に合わない場合、PICO-8は15fpsでの実行を試み、
  埋め合わせに1回の表示ごとに_update()を2回呼びます。


  :: PICO-8の60fpsでの動作

    _update()の代わりに_update60()が定義されると、PICO-8は60fpsモードで動作します。

      - _update60()と_draw()は60fpsで呼ばれます
      - 30fpsに落ちなければ、フレームごとに使用可能なPICO-8 CPUパワーは半分になります

    ** すべてのPICO-8が60fpsをサポートするわけではないことに注意してください。60fpsを
    サポートしないマシンでは、代わりに30fpsでの_draw() 2回ごとに_update60()が呼ばれます。
    以下のコードをあなたのコードの最後に加えることで、30fpsでのプログラム動作の様子を確認
    できます。

		u60=_update60 _update60=nil function _update() u60() u60() end


--------------------------------------------------------------------------------------------
	グラフィックス
--------------------------------------------------------------------------------------------

  PICO-8は128の8x8サイズのスプライトをシングルバンクで持っています。加えて、マップの後ろ
  半分("共有データ")とオーバーラップする128のスプライトがあります。この256のスプライトの
  集合はスプライトシートと呼ばれ、128x128サイズの画像として扱うことができます。

  すべてのPICO-8の描画操作は現在の描画状態の対象となります。描画状態はカメラ位置(すべての
  座標にオフセットを与えます)、パレット割り当て(スプライトの色を変更します)、クリップ領域、
  必要に応じて関連する関数で設定され、そうでなければ継続的に使われる描画色を含んでいます。

  描画状態はプログラムが実行される度にリセットされます。これは以下のコードと同じです。
	clip() camera() pal() color()

	Colours indexes:

	 0  black   1  dark_blue   2  dark_purple   3  dark_green
	 4  brown   5  dark_gray   6  light_gray    7  white
	 8  red     9  orange     10  yellow       11  green
	12  blue   13  indigo     14  pink         15  peach


clip [x y w h]

  ピクセル単位で画面のクリップ領域を設定します
  clip()でリセットします


pget x y
pset x y [c]

  x, yの座標のピクセル色を取得またはcに設定します


sget x y
sset x y [c]

  スプライトシートのピクセル色を取得またはcに設定します


fget n [f]
fset n [f] v

  スプライトのフラグの値を取得またはvを値に設定します
  fは0-7のフラグ番号です
  vはブール値でtrueまたはfalseになります

  フラグ0-7の初期状態はスプライトエディターで小さな色のついたボタンの列で設定可能です

  スプライトフラグの意味はユーザー次第で、どのスプライトのグループ('レイヤー')をマップに描画する
  かを指定することもできます。

  フラグ番号が省略されると、すべてのフラグはビット列として取得または設定されます
	fset(2, 1+2+8)   -- ビット0、1、3を設定します
	fset(2, 4, true) -- ビット4を設定します
	print(fget(2))   -- 27 (1+2+8+16)


print str [x y [col]]

  文字列を出力します
  strだけが指定され、カーソルが画面の終端に到達すると、改行と縦方向のスクロールが自動的に行われ
  ます(ターミナル風の動作です)


cursor x y

  カーソル位置を設定します


color col

  描画関数で使用されるデフォルト色を設定します


cls

  画面をクリアします


camera [x y]

  すべての描画命令について、画面のオフセットを-x, -yに設定します
  camera()でリセットします


circ     x y r [col]
circfill x y r [col]

  円の輪郭線または塗りつぶされた半径rの円をx,yに描画します


line x0 y0 x1 y1 [col]

  直線を描画します


rect     x0 y0 x1 y1 [col]
rectfill x0 y0 x1 y1 [col]

  矩形の枠線また塗りつぶされた矩形を描画します


pal c0 c1 [p]

  後続する描画命令ですべての色c0をc1として描画します

  pal()でデフォルト色にリセットします (透明色も含みます)
  2種類のパレットがあります (pはデフォルトでは0です)
		0 描画パレット : 描画時に色を変更されます // 例: スプライトの色を変更して描画します
		1 画面パレット : 表示されている色を変更します // 例: フェードに使用します
	c0 0-15の色番号
	c1 置き換える先の色番号


palt c t

  指定した色の透過処理をt(ブール値)に設定します
  透過処理はsprt()、ssprt()、map()で反映されます
  例: palt(8, true) -- 赤いピクセルは描画されません
  palt()でデフォルトにリセットします: カラー0意外のすべての色は不透明になります



spr n x y [w h] [flip_x] [flip_y]

  x, yにn番のスプライト(0-255)を描画します
	デフォルトでは幅と高さは1,1で、いくつ分のスプライトの幅で描画するかを指定します。
	デフォルトでは色0は透明として描画されます (palt()を参照してください)
	flip_xがtrueだと横方向に反転します
	flip_yがtrueだと縦方向に反転します


sspr sx sy sw sh dx dy [dw dh] [flip_x] [flip_y]

  スプライトシート(sx, sy, sw, sh)から矩形を引き伸ばして(dx, dy, dw, dh)の矩形として描画
  します // ピクセル単位で指定します
	色0はデフォルトでは透明として描画されます (palt()を参照してください)
	dwとdhはデフォルトではsw、shになります
  flip_xがtrueだと横方向に反転します
	flip_yがtrueだと縦方向に反転します


--------------------------------------------------------------------------------------------
	テーブル
--------------------------------------------------------------------------------------------


add t v

  値vをテーブルtの最後に追加します
	t[#t+1] = vと同じです

		FOO={}        -- 空のテーブルを作成する
		ADD(FOO, 11)
		ADD(FOO, 22)
		PRINT(FOO[2]) -- 22

del t v

  テーブルtの値vの最初のインスタンスを削除します。
  インデックスに穴が開かないよう、残りの要素は1番号分小さくなります。
  vは削除されるアイテムの値であり、テーブルのインデックスではないことに注意してください!
  del()はtableの繰り返し中にテーブルのアイテムについて安全に呼ぶことができます。

		A={1,10,2,11,3,12}
		FOR ITEM IN ALL(A) DO
			IF (ITEM < 10) THEN DEL(A, ITEM) END
		END
		FOREACH(A, PRINT) -- 10,11,12
		PRINT(A[3])       -- 12


all t

	Used in FOR loops to iterate over all items in a table (that have a 1-based integer index),
  (1から始まる番号を持つ)テーブルのすべての要素について追加された順に繰り返すFORループで使用します。

		T = {11,12,13};
		ADD(T,14)
		ADD(T,"HI")
		FOR V IN ALL(T) DO PRINT(V) END -- 11 12 13 14 HI
		PRINT(#T) -- 5


foreach t f

  テーブルtのそれぞれのアイテムについて、要素を引数として関数fを呼びます。

		FOREACH(T, PRINT)


pairs t

  テーブルtについて、キーと値のペアを各アイテムで提供しながら繰り返すFORループで使用します。
  all()と違い、pairs()はインデックスかどうかに関係なくすべてのアイテムを繰り返します。
  順序は保障されません。

		T = {["HELLO"]=3, [10]="BLAH"}
		T.BLUE = 5;
		FOR K,V IN PAIRS(T) DO
			PRINT("K: "..K.."  V:"..V)
		END

	出力:

		K: 10  v:BLAH
		K: HELLO  v:3
		K: BLUE  v:5


--------------------------------------------------------------------------------------------
	入力
--------------------------------------------------------------------------------------------

btn [i [p]]

  プレイヤーp(デフォルトは0)のボタンiの状態を取得します
	i: 0-5: 左ボタン 右ボタン 上ボタン 下ボタン ○ボタン ×ボタン
	p: 0-7のプレイヤー番号

	If no parameters supplied, returns a bitfield of all 12 button states for player 0 & 1
		// P0: bits 0..5  P1: bits 8..13

	Default keyboard mappings to player buttons:
		player 0: cursors, Z,X / C,V / N,M
		player 1: ESDF, LSHIFT,A / TAB,Q,E


btnp [i [p]]

	Same as btn() but only true when the button was not pressed the last frame
	btnp() also returns true every 4 frames after the button is held for 15 frames.

	Useful for things like 'press a button to continue' or menu item movement.


--------------------------------------------------------------------------------------------
	オーディオ
--------------------------------------------------------------------------------------------

sfx n [channel [offset]]

  n番のSFXをchannel(0-3)のチャネルでoffset(0-31)の位置のノートから再生します
	n -1 to stop sound on that channel
	n -2 to release sound on that channel from looping
	any music playing on the channel will be halted
	offset in notes (0..31)

	channel -1 (default) to automatically choose a channel that is not being used
		// if nothing plays, check you gave music() a channel_mask so that music
		// playback doesn't hog all channels. (e.g. 1+2 for the first two channels)


music [n [fade_len [channel_mask]]]

	play music starting from pattern n (0..63)
	n -1 to stop music
	fade_len in ms (default: 0)
	channel_mask specifies which channels to reserve for music only
		e.g. to play on channels 0..2: 1+2+4 = 7

	Reserved channels can still be used to play sound effects on, but only when that
	channel index is explicitly requested by sfx().


--------------------------------------------------------------------------------------------------------
	マップ
--------------------------------------------------------------------------------------------------------

mget x y
mset x y v

  マップのx,yの値を取得、または値vを設定します

map cel_x cel_y sx sy cel_w cel_h [layer]

  画面座標sx, sy(ピクセル単位)にmap(セル単位)の領域を描画します。
  layerが指定されると、同じフラグ番号のセットのセルのみが描画されます。

    // ビットフィールド。0x05はビット0とビット2のセットのスプライトのみを描画することを意味します。
    // デフォルトではすべてのスプライトを描画します

  例外: スプライト0は常に空として扱われます。

	例: map(0,0, 20,20, 4,2)
  -> 画面の20,20にマップの0,0から始まる4x2のブロックを描画します

--------------------------------------------------------------------------------------------------------
	メモリ
--------------------------------------------------------------------------------------------------------

PICO-8には3種類のメモリがあります。

  1. ベースRAM: 以下のレイアウトをご覧ください。peek() poke() memcpy() memset()関数でアクセスします。
  2. カートリッジROM: 0x4300までのベースRAMと同じレイアウトです。reload()関数でカートリッジからベースRAMにコピーされます。
  3. Lua RAM (1MB): コンパイル済みプログラム＋変数です。内部開発者以外は気にしなくてよいでしょう。

	Technical note: // you probably don't need to know this
  技術メモ: // 以下のことはおそらく知る必要はありません。
	While using the editor, the data being modified is in cart rom, but api functions such as spr()
  エディター使用中、変更されたデータはカートリッジROMの中に存在しますが、spr()やsfx()のようなAPI関数はベースRAMだけを
	and sfx() only operate on base ram. PICO-8 automatically copies cart rom to base ram (i.e.
  操作します。PICO-8は以下の3つのケースで、自動的にカートリッジROMをベースRAMにコピー（例: reload()を呼ぶ)します。

    1. カートリッジがロードされた時 (0.1.6より)
    2. カートリッジが実行された時
    3. 各エディターモードから抜けた時


:: ベースRAMメモリレイアウト
	0x0    グラフィックス
	0x1000 グラフィックス2/マップ2 (共有)
	0x2000 マップ
	0x3000 グラフィックス属性
	0x3100 ミュージック
	0x3200 SFX
	0x4300 ユーザーデータ
	0x5e00 永続するカートリッジデータ (256バイト)
	0x5f00 描画状態
	0x5f40 ハード状態
	0x5f80 GPIOピン (128バイト) // 開発中
	0x6000 スクリーン (8k)

  ユーザーデータは特別な意味はなく、memcpy()、peek()、poke()経由で何にでも使えます。
  継続カートリッジデータは0x5e00-0x5effに割り当てられますが、cartdata()が呼ばれた時だけ保存されます。
  カラーフォーマット(gfx/screen)は1バイト2ピクセルで、下位ビットが各ペアの左のピクセルを意味します。
  マップフォーマットは1セル1バイトで、バイトは通常スプライト番号を意味します。


peek addr
poke addr val

  ベースRAMのアドレスの読み込みまたは書き込みを行います。
  正規のアドレスは0x0-0x7fffです。
  外部への読み込みまたは書き込みはエラーを起こします。

memcpy dest_addr source_addr len

  ベースRAMのsourceからdestへlenバイトコピーします。
  コピー範囲を重複させることが可能です。

reload dest_addr source_addr len [filename]

  memcpyと同じですが、カートリッジROMからコピーを行います。
  コードセクション(>= 0x4300)は保護されており読み込むことができません。
  ファイル名が指定されていると、異なるカートリッジからデータを読み込みます。

cstore dest_addr source_addr len [filename]

  memcpyと同じですが、カートリッジROMからコピーを行います。
  cstore()はcstore(0, 0, 0x4300)と同じです。
  カートリッジを作成するための書き込みツールまたはマップエディターやグラフィックスエディタを
  使用しているマップやスプライトシートの確認ツールとして使用できます。
  コードセクション(>= 0x4300)は保護されており書き込めません。

  ファイル名が指定されていると、データは直接ディスク上のカートリッジに書き込まれます。
  64カートリッジまで1つのセッションで書き込むことができます。cstoreを使用する際の追加の説明は
  'カートリッジデータ'セクションをご覧ください。


memset dest_addr val len

  lenバイトをvalに設定します
  (かなり高速です -- クリップなしの水平方向スキャンライン等に使用できます)


--------------------------------------------------------------------------------------------------------
	数学
--------------------------------------------------------------------------------------------------------

max x y
min x y
mid x y z

  パラメータ中から、最大、最小、真ん中の値を返します
  例えば、mid(7,5,10)は7を返します

flr x

  xより小さい最も近い整数を返します // x-(x%1)
	flr(4.1)  --> 4
	flr(-2.3) --> -3.0


cos x
sin x

  xの余弦を返します。1.0が一周期になります。
  画面空間に合わせるため正弦は正負が逆転されています。
	e.g. sin(0.25) returns -1

  yの反転をしないラジアンベースの三角関数が好みの場合は、プログラムの先頭に以下のスニペットを
　挿入してください。

	cos1 = cos function cos(angle) return cos1(angle/(3.1415*2)) end
	sin1 = sin function sin(angle) return sin1(-angle/(3.1415*2)) end


atan2 dx dy

	Converts dx, dy into an angle from 0..1
	As with cos/sin, angle is taken to run anticlockwise in screenspace
	e.g. atan(1, -1) returns 0.125

sqrt x

  xの平方根を返します

abs x

	Returns the absolute (positive) value of x
  xの(正の)絶対値を返します。

rnd x
  0以上x未満の乱数nを返します
  整数が必要な場合は、flr(rnd(x))を使用してください

srand x
  乱数のシードを設定します
  シードはカートリッジ起動時に自動的にランダム化されます

ビット単位操作

	band x y
	bor  x y
	bxor x y
	bnot x

	shl  x y
	shr  x y

	// シフトは論理シフトです(符号ビットはシフトしません)

--------------------------------------------------------------------------------------------------------
	カスタムメニューアイテム
--------------------------------------------------------------------------------------------------------

menuitem index [label callback]

  ポーズメニューに追加要素を追加します

  番号は1-5である必要があり、各メニューアイテムが表示される順序を決定します
  labelは16文字までの文字列です
  callbackはユーザーにアイテムが選択された時に呼ばれる関数です

  ラベルや関数が指定されなかった場合、メニューアイテムは削除されます

  例:
	menuitem(1, "restart puzzle", function() reset_puzzle() sfx(10) end)


--------------------------------------------------------------------------------------------------------
	文字列
--------------------------------------------------------------------------------------------------------

	s = "the quick brown fox"

	-- 長さ

		print(#s)          --> 19


	-- 文字列の結合

		print("three "..4) --> "three 4"


	-- sub()で部分文字列を取得

		print(sub(s,5,9))  --> "quick"
		print(sub(s,5))  --> "quick brown fox"


--------------------------------------------------------------------------------------------
	カートリッジデータ
--------------------------------------------------------------------------------------------

  各カートリッジは(カートリッジではなく)ユーザーのPICO-8に64の数値(256バイト)を保持することが
  できます。これはハイスコアやプレイヤーの進行状況のようなデータを保存する簡単な方法として使えます。

  256バイトよりも多く必要な場合、cstore()関数を使って直接カートリッジに書き込むことができます。
  この方法の欠点は特定バージョンのカートリッジにデータが紐づけられてしまうことです。例えば、もし
  ゲームが更新されると、プレイヤーはセーブデータを失ってしまいます。

	Another alternative is to write directly to a second cartridge by specifying
  それ以外の方法はcstore()関数の4つめのパラメータを指定して2版目のカートリッジに直接書き込むこと
	a fourth parameter to cstore(). This requires a cart swap though (so is
  です。この方法はカートリッジ交換を必要としますが、
	slightly slower), and leaves data-cart litter when run from a local folder.


cartdata id

  カートリッジを読み込んだら一度呼びだします。idは64文字までの文字列で、他のカート
  リッジが偶然同じidを使うことがないようにユニークである必要があります。

	e.g. cartdata("zep_jelpi")

	legal characters are a..z, 0..9 and underscore (_)
  使用可能な文字はa-z、0-9、アンダースコア(_)です

  データが読み込まれるとtrueを返します

  cartdataはカートリッジ実行ごとに1度だけしか呼べません

  cartdata idがセットされると、メモリの0x5e00-0x5effが永続領域に割り当てられ、
  直接またはdget/dset経由でアクセスできます。


dget index

  指定した番号(0-63)の領域の値を取得する
  cartdata()を読んだ後に使用してください

dset index value

  指定した番号(0-63)の領域に値を書き込む
  cartdata()を読んだ後に使用してください

  保存したデータをflushする必要はありません -- 直接POKE()されても自動で永続
  ストレージに保存されます


------------------------------------------------------------------------------------------------------------
	バージョン履歴
------------------------------------------------------------------------------------------------------------

	v0.1.8

		Added: 60fps support
		Added: Music exporter
		Added: Custom GIF length (maximum 120 seconds)
		Added: -,+ to navigate sprite tabs, sfx, music patterns
		Added: sfx editor: navigate with home, end, pageup/down, mousewheel
		Added: <, > to modify sfx speed, or click and drag
		Added: Middle mouse button to pan around spritesheet / map
		Added: Shortcut command for splore: S
		Added: Pre-installed selection of BBS cart (use INSTALL_GAMES)
		Added: Warning when saving .p8.png with no label
		Added: (OSX) logging to ~/Library/Logs (viewable with Console.app)
		Changed: Can not CTRL-S save over a loaded bbs cart
		Changed: Only .p8 files listed by dir() and by splore
		Changed: Command history increased to 256
		Changed: exit() / shutdown() have no effect while running cart
		Fixed: Memory useage (stat(0)) inconsistent across host platforms
		Fixed: Spinny disks shows when reloading current cart with load()
		Fixed: GIF saver does not respect 64x64 / mirrored modes
		Fixed: Miscellaneous multi-line comments / strings issues
		Fixed: Empty map cels cost cpu in mapdraw()
		Fixed: mapdraw() slowdown when drawing bottom half of map
		Fixed: preprocess changes semantics when += and : operators on same line
		Fixed: Identifiers starting with underscore counted as extra token
		Fixed: Saving .png exceeding compressed code limit fails silently
		Fixed: Right-clicking a sprite does not set the currently edited sprite
		Fixed: (Windows) extra space added to pasted lines
		Fixed: spr() expensive when drawn with low negative coordinates
		Fixed: pipe character identical to colon character
		Fixed: (Raspberry Pi) shift key appends a character when entering text
		Fixed: Editor mode buttons are still clickable during cart runtime
		Fixed: When loading a .p8.png file, label is reset and needs to be re-captured
		Fixed: export() does not report failure
		Fixed: mset()'d changes in shared memory not readable via peek() / sget()
		Fixed: cstore() saving edited code
		Fixed: audio pop between patterns during music playback

	v0.1.7

		Added: menuitem()
		Added: button glyphs in code (shift-L, R, U, D, X, O)
		Added: Customisable data directory (e.g. pico8 -home mydata)
		Added: Web gpio pins: read and write pico8_gpio[] in javscript
		Fixed: SPLORE search doesn't reset
		Fixed: Splore skipping 33rd cart listing after loading more items
		Fixed: Crash when selecting a local binary file in splore
		Fixed: Semicolon can't be used as a list or statement separator
		Fixed: Exported html can not cstore self


	v0.1.6

		Added: SPLORE local & bbs cartridge explorer
		Added: setmetatable(), cocreate(), coresume(), costatus(), yield()
		Added: Spinning cart icon to show when a cart is swapped / written to
		Added: Permanent storage when carts played in a browser
		Added: Adjustable aspect ratio (-aspect 420 for 1:1)
		Changed: Lua memory limit: 1024k (was 512k)
		Changed: Music channel now resumes after being clobbered by an sfx
		Changed: Arpeggios double speed when SFX speed <= 8
		Changed: Exceeding compressed code limit does not block saving in .p8 format
		Changed: spr() half as expensive, to be consistent with map()
		Changed: Fractional hex number notation: 0x0.3 == 0x0.3000, (was 0x0.0003)
		Changed: : operator doesn't count as an extra token (same as .)
		Changed: cstore() writes directly to disk
		Changed: cstore(), reload() return number of bytes read / written
		Changed: save() while running does nothing. (use cstore() instead)
		Changed: load() while running loads and runs the specified cartridge
		Fixed: Small pops in audio mixer caused by sound wave discontinuities
		Fixed: HTML5-exported sound clicks badly under Chrome
		Fixed: Display palette is not oberserved when exporting GIFs
		Fixed: Rapid keypresses causes duplicate readings in tracker & text editor
		Fixed: += inside comments breaks preprocessor
		Fixed: sspr() cpu cost the same when clipped
		Fixed: cartdata() with bad parameters crashes
		Fixed: EXPORT from commandline can not be used without brackets and quotes


	v0.1.5

		Added: Raspberry Pi Build
		Added: Keyboard configuration for player buttons (KEYCONFIG)
		Added: Music tracker select / copy / paste
		Added: Single-level undo in audio tools
		Added: Live preview of frequencies in sound editor
		Fixed: Command history extends past last reboot
		Fixed: Sfx exporter broken
		Fixed: Slashes at end of path resolve to double slashes
		Fixed: Load cart from commandline under Windows


	v0.1.4d
	v0.1.4c

		Fixed: International character entry inserting extra characters
		Fixed: Lines with tabs have broken cursor placement and display boundary

	v0.1.4b

		Fixed: OSX command-key combinations broken

	v0.1.4

		Added: spritesheet importing and exporting with import("blah.png"), export("blah.png")
		Added: sfx exporting with export("blah%d.wav")
		Added: External cartridge parameter for reload() and cstore()
		Added: Persistent cartridge data mapped to 0x5e00
		Added: Click token limit to toggle token & char limit display
		Added: assert(), type()
		Added: P to pause
		Changed: code char limit: 64k (was 32k)
		Changed: local declarations and semicolons not counted as tokens
		Changed: Pairs of brackets and block delimitations count as one token
		Changed: Only _update() or _draw() need to exist to enter main loop
		Changed: Allow forward-slash in code editor
		Changed: info() reports current (last loaded or saved) filename
		Changed: html5 version compiled with NO_DYNAMIC_EXECUTION
		Changed: can only cstore up to 64 different files in one session
		Changed: load() automatically copies data section of cart to base ram
		Fixed: Shift-drag-copy sprites -> paste only pastes 1x1
		Fixed: ".." should count as one token
		Fixed: Tracker displaying D instead of .
		Fixed: Multi-line comments
		Fixed: Crash on run when code close to char limit
		Fixed: When over token limit, can not run any command
		Fixed: Unused high bits in SFX section not saved in .p8 format
		Fixed: Camera position memory mapping out of sync
		Fixed: pico8.txt link broken in windows installer
		Fixed: print() crashes when parameter is not a string or numbers
		Fixed: Multi-line strings & escape chars mess up tokenizer and print()
		Fixed: Joystick not responding when left stick is up to the left
		Fixed: Alt-F4 saves screenshot before quitting
		Fixed: Sprite editor mode button doesn't show fullscreen mode
		Fixed: -sound parameter not working in html5 version


	v0.1.3

		Added: paste into commandline
		Fixed: lua standard libraries accessible
		Fixed: command-line loading doesn't work
		Fixed: music pattern finished too early when all tracks set to looping
		Fixed: peek()ing odd bytes in sfx address space masks bit 7
		Fixed: cstore and reload from code space should have no effect

	v0.1.2

		Added: html5 cartridge exporter
		Added: Cartridge save data (64 fixed point numbers)
		Added: 8-player input
		Added: Demo carts: COLLIDE and BUTTERFLY
		Added: Command-line parameters // load cart, -run, settings
		Added: Alternative function keys (F6..F9 aliased as F1..F4)
		Added: pairs()
		Added: printh() for debugging
		Added: Tab completion for filenames in console
		Added: stack trace on runtime error
		Changed: music pattern length taken to be first non-looping channel's length
		Changed: noise instrument (6) has low frequency white noise scaled by volume
		Changed: screenshot captures whole window contents at display resolution
		Changed: del() moves remaining items up one index to maintain a packed table
		Changed: add(),del(),count(),all() no longer store extra fields
		Changed: removed count() from docs -- now just a legacy function. Use # operator instead.
		Changed: cursor only blinks while window is active
		Changed: peek(), poke() and binary operations (band()..) have no function call overhead
		Changed: yellow slightly warmer
		Changed: No camera snapping after pan in map mode
		Fixed: sqrt() crashing for 0 or >= 32761
		Fixed: Semi-colon characters in text editor
		Fixed: Long lines split when saving in .p8 format
		Fixed: pget() does not respect camera position
		Fixed: Error message when peeking or poking outside of legal address space
		Fixed: Search replace colour fills one pixel outside of selected region
		Fixed: Playing an empty music pattern breaks subsequent music playback
		Fixed: Invalid sfx editing state on startup
		Fixed: Painting instruments values in frequency view also sets volumes
		Fixed: Inconsistent gif recording speeds
		Fixed: Unmapped joystick support
		Fixed: Compressed code size sometimes larger than uncompressed
		Fixed: mid() fails when first argument is not smallest
		Fixed: Scroll wheel changes sprite/map zoom while in code editor
		Fixed: CTRL-R (quick-run) drawing over current line in command mode
		Fixed: Label capture (F7) does not respect screen palette state
		Fixed: Syntax highlighting of api functions and hex numbers
		Fixed: Looping to 0 with negative step finishes at 1
		Fixed: nil values printed as false instead of nil
		Fixed: Hexedecimal fractional parts
		Fixed: btnp() unresponsive when skipping frames
		Fixed: Editing mode is lost when using ctrl-r to run
		Fixed: Tracker note entry keys mapped, messing up piano-like layout
		Fixed: Shared gfx/map memory out of sync after some editor operations
		Fixed: Alt-gr character entry
		Fixed: Can map display palette to entries >= 16 using poke()
		Fixed: Using shift to select in code editor has wrong selection range
		Fixed: Dragging above top of text causes selection to flip to end
		Fixed: Duplicate at end of file listing


	v0.1.1

		Added: Token-based code limiting (8192 tokens, 32k ascii text)
		Added: Freeform move, pan and selection in sprite and map editors
		Added: Flood-fill tool (sprite and map)
		Added: .GIF saver
		Added: CTRL-Stamp to stamp with transparency
		Added: Single-step undo for map and sprites
		Added: 2x2 brush
		Added: sqrt(), atan2()
		Added: CTRL-S to quick-save
		Added: CTRL-R reloads .p8 file and runs (useful for external text editing)
		Added: Automatic backups on overwriting or quitting without saving
		Added: Scroll wheel zooms in sprite editor
		Added: Customisable resolution //  e.g. pico8 -width 580
		Added: Strings highlighted as green
		Added: ALT-click can optionally simulate right click (see config.txt)
		Added: palt() to control transparency for spr(), sspr()
		Added: info()
		Changed: load() tries adding .p8.png, .png if file doesn't exist
		Changed: Draw operations apply only to selection when active
		Changed: Move operations (cursors) apply to selection if present
		Changed: Removed time()
		Changed: Random seed is random on cart startup
		Changed: api functions never read directly from cart rom
		Changed: sspr() can take negative values for dw, dh
		Fixed: Sparse table indexing with integers fails
		Fixed: Assignment operators and shortform if-then-else failing
		Fixed: sspr() failed when w0 == 128
		Fixed: Circle drawing broken when camera not (0,0)
		Fixed: CPU hogging
		Fixed: Noise instrument clobbers rnd() sequence
		Fixed: Audio system not resetting on program reset
		Fixed: % operator sometimes wrong for negative values
		Fixed: Length operator (#)
		Fixed: Power operator (^)
		Fixed: Line clipping bug on right and bottom edges
		Fixed: print() precision for whole numbers
		Fixed: print() broken for negative y values
		Fixed: tokenization and keyword highlighting
		Fixed: sprite properties not copied/pasted
		Fixed: Only sfx 0..32 could be used as music patterns
		Fixed: Saving and loading a .p8 file adds newline to end of code
		Fixed: Drag selection to left margin in code editor -> selects all


	v0.1.0

		Added: demo cart: hello.p8 (use install_demos)
		Added: CTRL-R from anywhere to run cart or restart cart
		Added: use a,s to select colour in gfx editor
		Added: black background behind
		Added: consistent operation cpu costs
		Added: btn(), btnp() with no arguments returns bitfield
		Added: fget(id) returns bitfield of that sprite's flags
		Changed: renamed mapdraw() to map() for consistency
		Changed: default sleep time is 5ms (better cpu consumption for laptops)
		Fixed: memory limiter
		Fixed: wonky line and circle drawing
		Fixed: shift-click volume in sfx editor to set all
		Fixed: number formatting is now never in scientific notation
		Fixed: clipped error messages in console
		Fixed: text undo stores rollback points when chaning line number
		Fixed: print(str) carriage returns to previous x


	v0.0.5

		Added: help()
		Added: Ctrl+F / Ctrl+G to search for text, repeat search
		Added: del key in code editor
		Added: Short-hand single-line IF statements
		Added: Unary operators += -= /= *= %=
		Added: srand(), time(), added rnd() to docs
		Added: Ctrl+D to duplicate line
		Added: interactive ls() for multi-page file listings
		Added: band() bor() bxor() bnot() shl() shr()
		Added: runtime error line number
		Added: dir() (aliased to ls())
		Changed: print() only autoscrolls when called with no parameters
		Changed: alt+up/down to skip between function definitions (was ctrl)
		Changed: sspr() dw, dh defaults to sw, sh
		Fixed: Load crashes on files that are not .p8 format or directories
		Fixed: Misc editor cursor position glitches
		Fixed: Crash when syntax error occurs before viewing code
		Fixed: Broken newlines after rebooting
		Fixed: mkdir() called with no parameters creating "(null)" directory
		Fixed: scrolling past top of code with scrollwheel
		Fixed: alt-f4 to fastquit


	v0.0.4

		Added: Jelpi demo cart
		Added: Internal carts // use install_demos()
		Added: Joystick support
		Added: Undo/redo in code editor
		Added: Scroll wheel in code editor
		Added: LCTRL + UP/DOWN to navigate functions in code editor
		Added: LALT + LEFT/RIGHT to switch editing modes
		Added: btnp()
		Added: Release looping sample (a in editor , sfx(-2, channel) in code)
		Changed: Music stops when pausing program execution
		Changed: Allow 8 settable sprite flags
		Changed: Made noise instrument more bassy
		Fixed: Home, end keys
		Fixed: Sprite flags 4,5 not saved
		Fixed: mset() discarding 4 high bits
		Fixed: Crash when highlighting long strings


	v0.0.3

		Added: Palette mapping type 1 (on display)
		Added: Collections can be initialized with c={1,2,..}
		Added: holdframe() // used automatically by _draw(), update()
		Added: Sprite selections and operations across selections
		Added: Map selection and stamp tool
		Added: Immediate mode screen buffer preserved while switching views
		Added: Channel mask for music playback
		Added: Memory mapping for live sound data
		Added: .png cart format
		Added: Sprite navigation by keyboard (-, +)
		Fixed: Strict 4-channel sound
		Fixed: Automatic sfx channel selection (channel index: -1)


	v0.0.2

		Added: Command history
		Added: P2 keys
		Added: Boot sequence
		Added: Windows, 64-bit linux builds
		Added: CPU cost of internal api functions
		Added: Separate song channel index and mute status
		Added: Memory mapping
		Added: Search/replace colour in sprite editor
		Added: Copy/paste sprites and map regions
		Improved: Immediate mode command editing
		Improved: Editor cursor behaviour
		Fixed: Automatic audio channel selection


	v0.0.1

		First Alpha
