============================================================================================

 PICO-8 v0.1.8
 http://www.pico-8.com
 (c) Copyright 2014-2016 Lexaloffle Games LLP
 Author: Joseph White // hey@lexaloffle.com

 PICO-8 is built with:
 	SDL2 http://www.libsdl.org
 	Lua 5.2 http://www.lua.org  // see license.txt
 	GIFLIB http://giflib.sourceforge.net/

============================================================================================

PICO-8へようこそ！

  PICO-8は小さなゲームやプログラムを作って、共有して、プレイするための架空のコンソールです。
  PICO-8を起動させると、Luaプログラムを直接入力できるシェルが立ち上がり、スプライト、マップ、サウンドを作成する
  ためのツールが提供されます。

  PICO-8の厳しい制限は、使っていて楽しく、小さいけれど表現力に富んだデザインを奨励し、願わくばそれぞれのPICO-8
  カートリッジが個性的にものになるよう注意深く選択されています。


:: キー操作

	フルスクリーン切り替え: Alt+Enter
	終了: Alt+F4 または command-Q
	カートリッジの再読み込み/実行/再スタート: Ctrl+R
	クイックセーブ: Ctrl+S
	P: ポーズ (実行中)
	プレイヤー1 デフォルト操作: カーソルキー + ZX / NM / CV
	プレイヤー2 デフォルト操作: SDFE + tab,Q / shift A
	// デフォルト操作を変更するにはKEYCONFIGを編集してください


:: 仕様

	画面: 128x128, 16色固定パレット
	入力: 6ボタン
	カートリッジサイズ: 32k
	サウンド: 4チャンネル, 64サウンド
	コード: Lua (最大8192トークン)
	スプライト: シングルバンク 8x8 128スプライト (+マップと共有の128スプライト)
	マップ: 128x32 8ビットセル (+スプライトと共有の128x32セル)


:: Hello World

  PICO-8を起動したら、以下のいくつかのコマンドを入力してEnterを押してみましょう。

		PRINT("HELLO WORLD")
		RECTFILL(80,80,120,100,12)
		CIRCFILL(70,90,20,14)
		FOR I=1,4 DO PRINT(I) END

	(注: PICO-8は大文字のアルファベットのみを表示します -- Capsキーを押さずに普通に入力してください!)

  このようなコマンドを、コード編集モードで_updateや_drawなどの特殊コールバック関数とセットで使うことで、
  操作できるプログラムを作成することができます。例えば、次のプログラムはカーソルキーで円を動かします。
  ESCキーでコードエディターに切り替えて、以下のコードを入力またはコピーしてください。

	X = 64  Y = 64
	FUNCTION _UPDATE()
	 IF (BTN(0)) THEN X=X-1 END
	 IF (BTN(1)) THEN X=X+1 END
	 IF (BTN(2)) THEN Y=Y-1 END
	 IF (BTN(3)) THEN Y=Y+1 END
	END

	FUNCTION _DRAW()
	 RECTFILL(0,0,127,127,5)
	 CIRCFILL(X,Y,7,8)
	END

  では、ESCキーでメインコンソールに戻り、実際に動くところをRUNと入力して確認してみましょう。
  より複雑なプログラムはサンプルカートリッジを参考にしてみてください。


:: サンプルカートリッジ

  PICO-8には以下のカートリッジが含まれており、次のコマンドでインストールできます。
	INSTALL_DEMOS
	CD DEMOS

	API        PICO-8の大部分の機能をデモします
	JELPI      2プレイヤー対応のスクロールゲームデモ
	CAST       2.5D レイキャスターデモ
	MANDEL     マンデルブロー描画
	COLLIDE    壁とキャラクターの衝突判定サンプル
	BUTTERFLY  シェルピンスキーのフラクタル三角形描画
	DRIPPY     滴る曲線の描画
	STOMPY     音楽カートリッジ
	WOO        音楽カートリッジ

  カートリッジを実行するには、PICO-8を起動して次のように入力します。

	LOAD JELPI
	RUN

  プログラムを停止したり、もう一度編集モードに入るにはESCキーを押してください。


:: ファイルシステム

  ファイルやディレクトリ(フォルダ)の管理には以下のコマンドを使用します。

	DIR        現在のディレクトリの内容を表示します
	CD BLAH    ディレクトリを変更します
	CD ..      一つ上の階層のディレクトリに移動します
	CD /       (PICO-8の仮想ドライブの)一番上のディレクトリに移動します
	MKDIR      ディレクトリを作成します
	FOLDER     ホストOSのファイルブラウザで現在のディレクトリを開きます

	LOAD BLAH  現在のディレクトリからカートリッジを読み込みます
	SAVE BLAH  現在のディレクトリにカートリッジを保存します

  ファイルの移動、複製、削除をしたい場合は、FOLDER コマンドを使ってホストOS上で実行するのが
  最も良い方法です。

  PICO-8のドライブの初期設定での位置は以下になります。

	Windows: C:/Users/Yourname/AppData/Roaming/pico-8/carts
	OSX: /Users/Yourname/Library/Application Support/pico-8/carts
	Linux: ~/.lexaloffle/pico-8/carts

  pic-8/config.txtを編集することでドライブ位置やその他の設定を変更できます。

  コツ: もしあなたがDropboxユーザーであれば、ドライブ位置をDropboxの共有フォルダに設定することで、
  他のホストマシンのPICO-8とドライブを共有することができます。


:: バックアップ

  保存せず終了したり、既存のファイルを上書きした場合、カートリッジのバックアップがpico-8/backupに
  作成されます。


:: 設定

	:: config.txt

    config.txtに設定が書かれています。PICO-8が動作していない時に編集してください。

		Windows: C:/Users/Yourname/AppData/Roaming/pico-8/config.txt
		OSX: /Users/Yourname/Library/Application Support/pico-8/config.txt
		Linux: ~/.lexaloffle/pico-8/config.txt

    -homeスイッチ(後述)でconfig.txtやその他のデータの参照場所を変更することができます。


	:: コマンドライン引数

		// note: these override settings found in config.txt
    // 注意: これらの引数はconfig.txtの設定を上書きします

		pico-8 [スイッチ] [ファイル名.p8]

		-run                開始時にファイル名.p8を起動します
		-width n            ウィンドウまたは画面の幅を設定し、スケール指定がなければそれに一致するようにスケールを調整します
		-height n           ウィンドウまたは画面の高さを設定し、スケール指定がなければそれに一致するようにスケールを調整します
		-scale n            PICO-8のピクセルのサイズを設定します。"-scale 3"ならピクセルは3x3のサイズで描画されます
		-windowed n         0なら非ウィンドウ状態に、1ならウィンドウ状態します
		-sound n            0-255の範囲で音量を設定します
		-music n            0-255の範囲で音量を設定します
		-joystick n         ジョイスティック操作をプレイヤーnから開始します(0-7の範囲)
		-aspect n           アスペクト比を設定します。420が1:1(通常)となっており、560なら4:3、525なら5:4になります
		-run filename       自動でカートリッジを読み込み実行します
		-splore             カートリッジ選択モード(sploreモード)で起動します
		-home path          config.txtやその他のユーザーデータの参照場所を設定します
		-gif_len n          アニメgifの最大長さを秒単位で指定します(1-120の範囲)


	:: コントローラーの設定

    PICO-8はSDL2のコントローラーの設定方法を使用しています。この方法は、起動時に汎用のコントローラーを
    見つけ、config.txtと同じディレクトリのsdl_controllers.txtにあるボタン割り当てを探します。
    sdl_controllers.txtは一行に一つのキー割り当てを記述します。

    独自のボタン割り当てを作成するには、SDL2に付属するcontrollermapプログラムか、
    http://www.generalarcade.com/gamepadtool/ を使用してください。

    どのキーボードのキーをジョイスティックのボタンに割り当てるかを設定するには、KEYCONFIGを使用します。


:: カートリッジの共有 / HTML5出力

	カートリッジを共有する方法は３つあります。

    1. .p8または.p8.pngファイルディレクトリを他のPICO-8ユーザーと共有する

    2. カートリッジをLexaloffe BBSに投稿してWebブラウザ版にする

			http://www.lexaloffle.com/pico-8.php?page=submit

    .p8.png版の作成方法はsave()の説明を参照してください。(.pngで検索すると見つかります)

    3. html5版のカートリッジを出力する

			EXPORT FOO.HTML

      このコマンドはfoo.htmlとfoo.jsの2つのファイルを作成します。(2つのファイルとも必要です!)

      作者と投稿者の許可さえあれば、自由に出力されたカートリッジの使用や配布ができます。

      .htmlファイルは必要に応じて修正するためのテンプレートとなっています。.htmlファイルには
      設定変更のボタンと外部のウェブサイトへのリンク(初期状態だとPICO-8 BBSのカートリッジページ)、
      プレイ中にWebページがスクロールするのを防ぐための、キー入力をブロックするJavaScriptが
      含まれています。

      画面の幅と高さは変更可能ですが、通常は表示されるcanvasのサイズと一致している必要があることに
      注意してください。(通常は580x540です)


:: スクリーンショット、動画、カートリッジラベル

  カートリッジ動作中に以下のコマンドが使用できます。

		F6 デスクトップにスクリーンショットを保存する
		F7 カートリッジラベル画像をキャプチャする
		F8 動画の録画を開始する
		F9 デスクトップにアニメGIFを保存する(初期状態では最大8秒まで)

		// F6からF9が使えない環境では、F1からF４を使用してください

  save()コマンドをp8.pngフォーマットで使うとカートリッジラベルが保存されます。

  (いつも録画されているため)いつでも動画を保存することができます。8秒以下の動画を撮影したい場合は、
  F8キーで録画の開始時間をリセットしてください。

	To change the maximum gif length, edit gif_len in config.txt to specify the number
  アニメgifの最大時間を変更するには、config.txtのgif_lenに録画時間の秒数を指定します。
  gifフォーマットは30fpsちょうどに対応していないため、代わりにPICO-8は最も近い33.3fpsを使って
  います。


:: エクスポーター / インポーター

	1. スプライトシートを.pngから読み込み、または出力するには次のコマンドを使用します

		import("blah.png")    --  128x128のpngとして読み込み、色をpico-8のパレットに合わせます
		export("blah.png")    --  folder()を出力先位置の指定に使用します

	2. 効果音や音楽の出力には次のコマンドを使用します

		export("blah.wav")    --  (編集モードがMUSICの時の)選択中のパターンから音楽を出力します
		export("blah.wav")    --  (編集モードがSFXの時の)選択中の効果音を出力します
		export("blah%d.wav")  --  すべての効果音をblah0.wav, blah1.wav .. blah63.wavのように出力します

    // コマンドラインでは、EXPORT BLAH.WAVのように括弧やダブルクォーテーションは省略できます


:: PICO-8の特殊な点

	次のような特殊な点に注意してください。

  - スプライトシートの後ろ半分とマップの後ろ半分は同じメモリに割り当てられています
    // どのように動作するかよくわからない場合は、どちらか片方だけ使用するのがよいでしょう
  - PICO-8の数値は32767.99までしか扱えません
    // 毎フレームカウンターに1を足すと、18分後にはオーバーフローを起こします!
  - Luaの配列は通常0ではなく1から開始されます。FOREACHはT[0]ではなくT[1]から開始されます
	- cos() and sin() take 0..1 instead of 0..PI*2, and sin() is inverted.
  - cos()とsin()は0からPI*2の代わりに0から1の範囲を使用し、sin()の値は反転しています
  - sgn(0)は1を返します
  - Mac上でフルスクリーンを切り替えるにはAlt-Enterを使用します(Cmd-Fはテキストの検索に使用されています)
  - .pngカートリッジを出力したい場合はEXPORTではなくSAVEを使用します。EXPORTはスプライトシートだけを保存します!


:: Splore

  SPLOREはローカルとBBS(オンライン)のカートリッジを閲覧、管理するためのユーティリティです。
  SPLORE[enter]と打つか、-sploreオプションをつけてPICO-8を立ち上げることで使用します。

  SPLOREのすべての操作をジョイスティックで行うことができます。
  左ボタンと右ボタンでカートリッジのリストを選択します
  上ボタンと下ボタンで各リストのアイテムを選択します
  Xボタン、Oボタン、MENUボタンでカートリッジを起動します

  cartリストの中でMENUボタンを押すとカートリッジをお気に入り登録するか、sploreを終了させることが
  できます。キーボードの場合は、カートリッジリストでアイテムが選択されている時にFキーでお気に入り
  登録できます。

  BBSのカートリッジリスト閲覧中は、カートリッジのリストを再ダウンロードするためにトップリストを使用
  できます。オフライン時は、最後にダウンロードされたリストが表示されます。ダウンロード済みのカートリッジ
  は引き続きプレイ可能です。

  インターネット環境のないマシンにPICO-8をインストールした場合も、INSTALL_GAMESコマンドで
  事前にインストールされているいくつかのBBSカートリッジをお気に入りリストに追加することができます。


============================================================================================
	エディターモード
============================================================================================

  コンソールとエディターを切り替えるにはESCキーを押します。
  編集モードーを切り替えるには、右上の編集モードタブをクリックするか、ALT+左キー/右キーを押して
  ください。


  ** 注意: スプライトシートの後ろ半分(バンク2と3)とマップの後ろ半分はカートリッジの同じ領域を共有して
  います。そのデータ領域をどう使うかはあなた次第ですが、スプライトシートの後半を編集するとマップデータ
	be aware that drawing on the second half of the sprite sheet could clobber data on
  が、マップデータの後半を編集するとスプライトシートが破壊されることに注意してください。


:: コードエディター

  シフトキーを押し続ける(またはマウスでドラッグすると)と領域を選択します
  CTRL-X、C、Vで選択領域をカット、コピー、ペーストします
  CTRL-Z、Yでアンドゥ(編集の取り消し)とリドゥ(編集の再実行)をします
  CTRL-Fでテキストを検索します
  CTRL-Gで最後の検索を繰り返します
  ALT-UP、DOWNで前後の関数に移動します

	At the bottom right of the code editor you can see how many tokens have been used. One
  使用されているトークン数はコードエディターの右下で確認することができます。1つのプログラムは最大
  8192トークンを使用できます。それぞれのトークンは単語(変数名等)または演算子です。左右括弧のペアや
  文字列は1トークンとしてカウントされます。カンマ、ピリオド、LOCALキーワード、セミコロン、ENDキーワード、
  コメントはカウントされません。

  SHIFT-L、R、U、D、O、Xでボタン用の特殊文字を入力できます。


:: スプライトエディター

  スプライトエディターではスプライト単位と自由なピクセル単位の両方の編集ができます。画面下部のスプライト
  ナビゲーターでスプライトシートの8x8単位での閲覧ができます。それより大きなサイズや奇数のサイズを扱いたい
  場合は、自由形状ツール(パン、選択)を使うことも可能です。

	ドローツール
    スプライト上でクリックとドラッグで編集します。
    見える範囲に適用されます。
    CTRLを押しながらクリックすると同じ色を探して置き換えます。
    色を選択するには左マウスボタンを使います。

	スタンプツール
    ？どこでもクリックするとスタンプを押します。
    LCONTROLを押しつづケルト透明色つきのスタンプを押します。

	選択ツール // ショートカット: 左SHIFTまたはSキー
    選択領域を作成する
    Enterまたはクリックで非選択状態になります。

    ピクセル単位の選択でない場合は、多数の操作がスプライト単位の選択領域に適用されます。
    スプライトを選択するにはスプライトナビゲーターでシフトを押しながらドラッグします。

	パンツール // ショートカット: スペースキー
    スプライトシートを閲覧します。

	塗りつぶしツール
    現在のカラーで塗りつぶします。
    現在の選択領域に適用されます。
    どこも選択されていなければ、見える範囲に適用されます。

	特殊キー
		CTRL-Zでアンドゥします // 0.2.0では1度だけ有効です
		CTRL-Cで選択した領域またはスプライトをコピーします
		CTRL-Vで現在のスプライトの位置にペーストします
		QキーとWキーでスプライトを前と後に切り替えます
		1キーと2キーで色を前と後に切り替えます
    Tabキーでフルスクリーンビューを切り替えます
    マウスホイールでズームします(フルクリーンでは中央中心になります)


	選択した領域またはスプライトの操作方法
		fで左右反転
		vで上下反転
		rで回転(領域が正方形である必要があります)
		カーソルキーで移動(スプライト選択時はループします)

	スプライトフラグ
    8色の円は現在のスプライトのスプライトフラグです。
    それぞれのフラグはtrue(オン)かfalse(オフ)にでき、FSETとFGET関数でアクセスされます。
    スプライトフラグは0から番号が振られ、左から(0,1,2..7)となります。詳細はfset()の
    説明をご覧ください。


:: マップエディター

  PICO-8のマップは8ビットの値を持つ128x32(または共有領域を使った128x64の)のブロックです。
  それぞれの値はスプライトへの参照(0-255)として表示されますが、あなたが望むどんなものを表すデータ
  としてでも使用できます。

  ツールはスプライト編集モードで使われているものと同じです。スプライトを選択してクリックやドラッグ
  で値をマップにペイントしてください。

  複数のスプライトを描画するにはスプライトナビゲーターからシフトを押しながら選択します。
  値のブロックをコピーするには選択ツールを使った後にスタンプツールでペーストします。
  マップをパンするにはパンツールを使うかスペースを押し続けます。
  QキーとWキーでスプライトを前と後に移動します。


:: 効果音エディター

  カートリッジ1つにつき効果音と音楽の両方で使用する64のSFX(サウンドエフェクト)があります。

  SFXは32ノートで構成され、それぞれのノートは以下の要素を持っています。
		周波数 frequency  (C0-C5)
		音色   instrument (0-7)
		音量   volume     (0-7)
		効果   effect     (0-7)

  SFXは以下のプロパティも持っています。

    再生速度(SPD) : ノート再生する長さの'ticks'数
      // 1が最短で3は3倍長くなります

    ループ開始と終了位置 : ループ時に戻ってくる位置とループ再生する終端位置です
      // ループはstart indexがend index以上だとオフになります

	There are 2 modes for editing/viewing a SFX: Pitch mode (more suitable
	for sound effects) and tracker mode (more suitable for music). The mode
	can be changed using the top-left buttons, or toggled with TAB.


  1. ピッチモード(Pitch Mode)

		Click and drag on the pitch area to set the frequency for each note,
		using the currently selected instrument (indicated by colour).

		Hold shift to apply only the selected instrument
		Hold CTRL to snap notes to the C minor pentatonic scale


  2. トラッカーモード(Tracker Mode)

		Each note shows: frequency octave instrument volume effect
		To enter a note, use q2w3er5t6y7ui zsxdcvgbhnjm (piano-like layout)
		New notes are given the selected instrument/effect values
		To delete a note, press backspace or set the volume to 0

		Click and then shift-click to select a range that can be copied
		(CTRL-C) and pasted (CTRL-V)


	3. 両モードの操作方法

		- + to navigate the current SFX
	    < > to change the speed.
		SPACE to play/stop
		A to release a looping sample
		Click or left click to increase / decrease the SPD or LOOP values
		 // Hold shift when clicking to increase / decrease by 4
		 // Alternatively, click and drag left/right or up/down
		Shift-click an instrument, effect, or volume to apply to all notes.


	:: エフェクト

		0 none
		1 slide          //  Slide to the next note
		2 vibrato        //  Rapidly vary the pitch within one quarter-tone
		3 drop           //  Rapidly drop the frequency to very low values
		4 fade in        //  Ramp the volume up from 0
		5 fade out       //  Ramp the volume down to 0
		6 arpeggio fast  //  Iterate over groups of 4 notes at speed of 4
		7 arpeggio slow  //  Iterate over groups of 4 notes at speed of 8

		If the SFX speed is <= 8, arpeggio speeds are halved to 2, 4


:: ミュージックエディター

  PICO-8の音楽はパターンのシーケンスでコントロールされます。それぞれのパターンはどのSFXをその
  チャンネルで再生するかを示す4つの数字のリストになります。


	:: フローコントロール

    プレイバックフローは右上の3つのボタンを使って操作します。

		When a pattern has finished playing, the next pattern is played unless:
    パターンの再生が終わった時、以下に該当しなければ次のパターンを再生します。

    - 再生する残りデータがない(音楽は止まります)
    - そのパターンにSTOPコマンドがセットされている(最初のボタン)
		- a LOOP BACK command is set (the 3rd button), in which case the music player searches
    - LOOP BACKコマンド(3つ目のボタン)がセットされていると、LOOP START(2番目のボタン)がセットされている
			back for a pattern with the LOOP START command set (the 2nd button) or returns to
      以前のパターンを探し、あるいは何も見つからなければパターン0に戻る
			pattern 0 if none is found.

    パターンが異なるスピードのSFXを持っている場合、パターンは最も左のループではないチャンネルが
    再生を終えた時に終了します。これは変則的な拍子記号や倍速のドラムビートなどを構成するのに用います。


	:: カートリッジ間での音楽のコピー

    パターンの範囲選択: パターンナビゲーターの最初のパターンを一度クリックし、最後のパターンを
    シフトクリックする。選択されたパターンはCTRL-CとCTRL-Vでコピーやペーストできます。他のカートリッジ
    にペーストされるとき、もしそのパターンが参照しているSFXが存在しなければ、そのSFXもペーストされます。
    (異なる番号になる場合があります)


============================================================================================
	Lua入門
============================================================================================

PICO-8のプログラムはLua言語の文法で記述しますが、Luaの標準ライブラリは使用しません。
以下はLuaで必須となる文法の簡単な要約です。

より詳細や適正なLuaを知りたい場合は、www.lua.orgを見てください。

:: コメント

  -- 行末までを無視させるにはこのように2つのハイフン(-)を使ってください
	--[[ 複数行の
	コメントです ]]


:: 型と代入

  Luaの型には数値、文字列、ブーリアン(真偽値)、テーブルがあります。

	NUM = 12/100
	S = "THIS IS A STRING"
	B = FALSE
	T = {1,2,3}

  PICO-8の数値はすべて16:16の固定小数です。その範囲は-32768.0 to 32767.99です。

  オプションの小数部を持った16進数記述も使えます。
		0x11        -- 17
		0x11.4000   -- 17.25

  ゼロ除算は(0x7fff.ffff)最大の数値として評価されます。

:: 条件分岐

	IF NOT B THEN
		PRINT("B IS FALSE")
	ELSE
		PRINT("B IS NOT FALSE")
	END

	-- ELSEIFありの場合

	IF X == 0 THEN
		PRINT("X IS 0")
	ELSEIF X < 0 THEN
		PRINT("X IS NEGATIVE")
	ELSEIF X > 0 THEN
		PRINT("X IS POSITIVE")
	ELSE
		PRINT("THIS IS LINE IS NEVER REACHED")
	END

	IF (4 == 4) THEN PRINT("EQUAL") END
	IF (4 ~= 3) THEN PRINT("NOT EQUAL") END
	IF (4 <= 4) THEN PRINT("LESS THAN OR EQUAL") END
	IF (4 > 3) THEN PRINT("MORE THAN") END

:: ループ

	FOR X=1,5 DO
		PRINT(X)
	END
	-- prints 1,2,3,4,5

	X = 1
	WHILE(X <= 5) DO
		PRINT(X)
		X = X + 1
	END

	FOR X=1,10,3 DO PRINT(X) END   -- 1,4,7,10

	FOR X=5,1,-2 DO PRINT(X) END  -- 5,3,1


:: 関数とローカル変数

	Y=0
	FUNCTION PLUSONE(X)
		LOCAL Y = X+1
		RETURN Y
	END
	PRINT(PLUSONE(2)) -- 3
	PRINT(Y)          -- 0


:: テーブル

  Luaのテーブルは型が混合可能なキーと値のペアのコレクションです。整数のインデックスをキーにすることで
  配列としても使用できます。

	A={} -- create an empty table
	A[1] = "BLAH"
	A[2] = 42
	A["FOO"] = {1,2,3}

	-- デフォルトでは常に1から始まる配列になります

	A = {11,12,13,14}
	PRINT(A[2]) -- 12

	-- 1から始まるインデックスつきのテーブルのサイズ

	PRINT(#A)   -- 4

	-- 文字列のインデックスはドット(.)記法を使用できます

	PLAYER = {}
	PLAYER.X = 2 -- PLAYER["X"]と同じです
	PLAYER.Y = 3

	-- 後述のAPIリファレンスのテーブルセクションも産業してください


:: PICO-8向け速記法

  PICO-8にはいくつかの標準にはない一般的なパターンの略記法があります。

  1. 1行のIF THEN END構文はTHENとENDを省略可能です

	IF (NOT B) I=1 J=2

	-- is equivalent to: IF (NOT B) THEN I=1 J=2 END
  -- 等しいか判定する: IF (NOT B) THEN I=1 J=2 END
	-- 条件は常に括弧で括られている必要があることに注意してください


	2. 単項演算子

	a += 2  -- equivalent to: a = a + 2
	a -= 2  -- equivalent to: a = a - 2
	a *= 2  -- equivalent to: a = a * 2
	a /= 2  -- equivalent to: a = a / 2
	a %= 2  -- equivalent to: a = a % 2


	3. !=演算子

  速記法ではありませんが、PICO-8は"異なる値"を表すために~=に加えて!=も許容します。


============================================================================================
	APIリファレンス
============================================================================================

  PICO-8はLuaスクリプト言語で開発しますが、Lua標準ライブラリは含んでいません。代わりにPICO-8の最小の仕様と
  限定された画面サイズを踏まえた小さなAPIを提供しています。APIの大部分を使用している参考プログラムとしては、
  /DEMOS/API.P8をご覧ください。

  ここで説明される関数は次の形式で書かれています。
	関数名 引数 [オプション引数]

  コマンドラインから使用されるシステム関数は通常の括弧と文字列のクォーテーションを省略できます。
	load blah.p8 --> load("blah.p8")


--------------------------------------------------------------------------------------------------------
	システム
--------------------------------------------------------------------------------------------------------


load filename
save filename
	Load or save a cartridge

	Use ".png" format to save a png -- otherwise text format (".p8") is used.

	The ".p8" can be omitted in both cases, and it is automatically added
		save("blah") --> save("blah.p8")
		save("blah.png") --> save("blah.p8.png")
		load("blah.png") --> load("blah.p8.png") (if blah.png doesn't exist)

	Same goes for loading. If the file is not found, pico-8 will try again with ".p8" inserted.

	The ".png" can also be omitted, but only when loading
		load ("blah") --> tries "blah.p8.png" and then "blah.png" if "blah.p8" doesn't exist

	Once a cartridge has been loaded or saved, it can also be quick-saved with CTRL-S


	:: Saving .png carts with a text label and preview image

	To generate a preview image saved with the cart, run the program first and press F7 to grab
	whatever is on the screen. The first two lines of the program starting with '--' are also drawn
	to the cart's label.

	e.g.
	-- OCEAN DIVER LEGENDS
	-- BY LOOPY


	:: Code size restrictions for .png format

	When saving in .png format, the comrpessed size of the code must be less than 15360 bytes. To find
	out the current size of your code, use the INFO command. The compressed size limit is not enforced
	for .p8 format. In most cases you don't need to worry about the compressed size, as the token
	limit (8192) will be reached first.


folder
	Open the carts folder in the host operating system.

ls
	List all files in the current folder

run
	Run from the start of the program
	Can be called from inside a program to reset program.

resume
	Run from the existing cart state (flakey)

reboot
	Reboot the machine
	Useful for starting a new project

stat x
	x:0 returns current Lua memory useage (0..1024MB)
	x:1 returns cpu useage for last frame (1.0 means 100% at 30fps)

info
	Print out some information about the cartridge:
	code size, tokens, compressed size

flip
	Flip the back buffer to screen and wait for next frame (30fps)
	Don't normally need to do this -- _draw() calls it for you.

	If your program does not call flip before a frame is up, and a _draw() callback
	is not in progress, the current contents of the back buffer are copied to screen.

printh str
	Print a string to host operating system's console for debugging.


--------------------------------------------------------------------------------------------
	プログラム構造
--------------------------------------------------------------------------------------------

	There are 3 special functions that, if defined by the user, are called during program
	execution:

		_update()
			Called once per update at 30fps

		_draw()
			Called once per visible frame

		_init()
			Called once on program startup


	_draw() is normally called at 30fps, but if it can not complete in time, pico-8 will
	attempt to run at 15ps and call _update() twice per visible frame to compensate.



	:: Running PICO-8 at 60fps

		If _update60() is defined instead of _update(), PICO-8 will run in 60fps mode:

			- both _update60() and _draw() are called at 60fps
			- half the PICO-8 CPU is available per frame before dropping down to 30fps

		** please note that not all PICO-8s support 60fps. On machines that do not support it,
		_update60() will instead be called twice per frame and _draw() at 30fps. You can check
		the behaviour of your program running at 30fps by adding the following snippet to the
		bottom of your code:

		u60=_update60 _update60=nil function _update() u60() u60() end


--------------------------------------------------------------------------------------------
	グラフィックス
--------------------------------------------------------------------------------------------

	PICO-8 has a single bank of 128 8x8 sprites, plus another 128 that overlaps with the
	bottom half of the map data ("shared data"). These 256 sprites are collectively called
	the sprite sheet, and can be thought of as a 128x128 pixel image.

	All of PICO-8's drawing operations are subject to the current draw-state. The draw-state
	includes a camera position (for adding an offset to all coordinates), palette mapping
	(for recolouring sprites), clipping rectangle, and a draw colour that can optionally be
	set by any relevant function but otherwise persists.

	The draw state is reset each time a program is run. This is equivalent to calling:
	clip() camera() pal() color()

	Colours indexes:

	 0  black   1  dark_blue   2  dark_purple   3  dark_green
	 4  brown   5  dark_gray   6  light_gray    7  white
	 8  red     9  orange     10  yellow       11  green
	12  blue   13  indigo     14  pink         15  peach


clip [x y w h]

	Sets the screen's clipping region in pixels
	clip() to reset


pget x y
pset x y [c]

	Get or set the colour (c) of a pixel at x, y.


sget x y
sset x y [c]

	Get or set the colour (c) of a spritesheet pixel.


fget n [f]
fset n [f] v

	Get or set the value (v) of a sprite's flag
	f is the flag index 0..7
	v is boolean and can be true or false

	The initial state of flags 0..7 are settable in the sprite editor,
	using the line of little colourful buttons.

	The meaning of sprite flags is up to the user, or can be used to
	indicate which group ('layer') of sprites should be drawn by map.

	If the flag index is omitted, all flags are retrieved/set as a bitfield
	fset(2, 1+2+8)   -- sets bits 0,1 and 3
	fset(2, 4, true) -- sets bit 4
	print(fget(2))   -- 27 (1+2+8+16)


print str [x y [col]]

	Print a string
	If only str is supplied, and the cursor reaches the end of the screen,
	a carriage return and vertical scroll is automatically applied.
	(terminal-like behaviour)


cursor x y

	Set the cursor position and carriage return margin


color col

	Set the default color to be used by drawing functions


cls

	Clear the screen


camera [x y]

	Set a screen offset of -x, -y for all drawing operations
	camera() to reset


circ     x y r [col]
circfill x y r [col]

	Draw a circle or filled circle at x,y with radius r


line x0 y0 x1 y1 [col]

	draw line


rect     x0 y0 x1 y1 [col]
rectfill x0 y0 x1 y1 [col]

	Draw a rectange or filled rectange


pal c0 c1 [p]

	Draw all instances of colour c0 as c1 in subsequent draw calls

	pal() to reset to system defaults (including transparency values)
	Two types of palette (p; defaults to 0)
		0 draw palette   : colours are remapped on draw    // e.g. to re-colour sprites
		1 screen palette : colours are remapped on display // e.g. for fades
	c0 colour index 0..15
	c1 colour index to map to


palt c t

	Set transparency for colour index to t (boolean)
	Transparency is observed by spr(), sspr() and map()
	e.g. palt(8, true) -- red pixels not drawn
	palt() resets to default: all colours opaque except colour 0



spr n x y [w h] [flip_x] [flip_y]

	draw sprite n (0..255) at position x,y
	width and height are 1,1 by default and specify how many sprites wide to blit.
	Colour 0 drawn as transparent by default (see palt())
	flip_x=true to flip horizontally
	flip_y=true to flip vertically


sspr sx sy sw sh dx dy [dw dh] [flip_x] [flip_y]

	Stretch rectangle from sprite sheet (sx, sy, sw, sh) // given in pixels
	and draw in rectangle (dx, dy, dw, dh)
	Colour 0 drawn as transparent by default (see palt())
	dw, dh defaults to sw, sh
	flip_x=true to flip horizontally
	flip_y=true to flip vertically


--------------------------------------------------------------------------------------------
	テーブル
--------------------------------------------------------------------------------------------


add t v

	Add value v to the end of table t.
	Equivalent to t[#t+1] = v

		FOO={}        -- create empty table
		ADD(FOO, 11)
		ADD(FOO, 22)
		PRINT(FOO[2]) -- 22

del t v

	Delete the first instance of value v in table t
	The remaining entries are shifted left one index to avoid holes.
	Note that v is the value of the item to be deleted, not the index into the table!
	del() can be called safely on a table's item while iterating over that table.

		A={1,10,2,11,3,12}
		FOR ITEM IN ALL(A) DO
			IF (ITEM < 10) THEN DEL(A, ITEM) END
		END
		FOREACH(A, PRINT) -- 10,11,12
		PRINT(A[3])       -- 12


all t

	Used in FOR loops to iterate over all items in a table (that have a 1-based integer index),
	in the order they were added.

		T = {11,12,13};
		ADD(T,14)
		ADD(T,"HI")
		FOR V IN ALL(T) DO PRINT(V) END -- 11 12 13 14 HI
		PRINT(#T) -- 5


foreach t f

	For each item in table t, call function f with the item as a single parameter.

		FOREACH(T, PRINT)


pairs t

	Used in FOR loops to iterate over table t, providing both the key and value for each item.
	Unlike all(), pairs() iterates over every item regardless of indexing scheme.
	Order is not guaranteed.

		T = {["HELLO"]=3, [10]="BLAH"}
		T.BLUE = 5;
		FOR K,V IN PAIRS(T) DO
			PRINT("K: "..K.."  V:"..V)
		END

	Output:

		K: 10  v:BLAH
		K: HELLO  v:3
		K: BLUE  v:5


--------------------------------------------------------------------------------------------
	入力
--------------------------------------------------------------------------------------------

btn [i [p]]

	get button i state for player p (default 0)
	i: 0..5: left right up down button_o button_x
	p: player index 0..7

	If no parameters supplied, returns a bitfield of all 12 button states for player 0 & 1
		// P0: bits 0..5  P1: bits 8..13

	Default keyboard mappings to player buttons:
		player 0: cursors, Z,X / C,V / N,M
		player 1: ESDF, LSHIFT,A / TAB,Q,E


btnp [i [p]]

	Same as btn() but only true when the button was not pressed the last frame
	btnp() also returns true every 4 frames after the button is held for 15 frames.

	Useful for things like 'press a button to continue' or menu item movement.


--------------------------------------------------------------------------------------------
	オーディオ
--------------------------------------------------------------------------------------------

sfx n [channel [offset]]

	play sfx n on channel (0..3) from note offset (0..31)
	n -1 to stop sound on that channel
	n -2 to release sound on that channel from looping
	any music playing on the channel will be halted
	offset in notes (0..31)

	channel -1 (default) to automatically choose a channel that is not being used
		// if nothing plays, check you gave music() a channel_mask so that music
		// playback doesn't hog all channels. (e.g. 1+2 for the first two channels)


music [n [fade_len [channel_mask]]]

	play music starting from pattern n (0..63)
	n -1 to stop music
	fade_len in ms (default: 0)
	channel_mask specifies which channels to reserve for music only
		e.g. to play on channels 0..2: 1+2+4 = 7

	Reserved channels can still be used to play sound effects on, but only when that
	channel index is explicitly requested by sfx().


--------------------------------------------------------------------------------------------------------
	マップ
--------------------------------------------------------------------------------------------------------

mget x y
mset x y v

	get or set map value (v) at x,y

map cel_x cel_y sx sy cel_w cel_h [layer]

	draw section of map (in cels) at screen position sx, sy (pixels)
	if layer is specified, only cels with the same flag number set are drawn
		// Bitfield. So 0x5 means draw sprites with bit 0 and bit 2 set.
		// defaults to all sprites

	exception: sprite 0 is always taken to mean empty.

	e.g. map(0,0, 20,20, 4,2)
	-> draws a 4x2 blocks of cels starting from 0,0 in the map, to the screen at 20,20

--------------------------------------------------------------------------------------------------------
	メモリ
--------------------------------------------------------------------------------------------------------

PICO-8 has 3 types of memory:

	1. base ram (32k): see layout below. Access with peek() poke() memcpy() memset()
	2. cart rom: same layout as base ram until 0x4300. Copy from cart to base ram with reload()
	3. lua ram (1MB): compiled program + variables. Pay no attention to the man behind the curtain.

	Technical note: // you probably don't need to know this
	While using the editor, the data being modified is in cart rom, but api functions such as spr()
	and sfx() only operate on base ram. PICO-8 automatically copies cart rom to base ram (i.e.
	calls reload()) in 3 cases:

		1. When a cartridge is loaded (from 0.1.6)
		2. When a cartridge is run
		3. When exiting any of the editor modes


:: Base ram memory layout
	0x0    gfx
	0x1000 gfx2/map2 (shared)
	0x2000 map
	0x3000 gfx_props
	0x3100 song
	0x3200 sfx
	0x4300 user data
	0x5e00 persistent cart data (256 bytes)
	0x5f00 draw state
	0x5f40 hardware state
	0x5f80 gpio pins (128 bytes) // in development
	0x6000 screen (8k)

	User data has no particular meaning and can be used for anything via memcpy(), peek() & poke().
	Persistent cart data is mapped to 0x5e00..0x5eff but only stored if cartdata() has been called.
	Colour format (gfx/screen) is 2 pixels per byte: low bits encode the left pixel of each pair.
	Map format is one byte per cel, where the byte normally encodes a sprite index.


peek addr
poke addr val

	Read and write one byte to an address in base ram.
	Legal addresses are 0x0..0x7fff
	Reading or writing outside causes a fault

memcpy dest_addr source_addr len

	Copy len bytes of base ram from source to dest
	Sections can be overlapping

reload dest_addr source_addr len [filename]

	Same as memcpy, but copies from cart rom
	The code section ( >= 0x4300) is protected and can not be read.
	If filename specified, load data from a different cartridge

cstore dest_addr source_addr len [filename]

	Same as memcpy, but copies from base ram to cart rom
	cstore() is equivalent to cstore(0, 0, 0x4300)
	Can use for writing tools to construct carts or to visualize the state
	of the map / spritesheet using the map editor / gfx editor.
	The code section ( >= 0x4300) is protected and can not be written to.

	If a filename is specified, the data is written directly to that
	cartridge on disk. Up to 64 cartridges can be written in one session.
	See the 'Cartridge Data' section for additional notes on using cstore.


memset dest_addr val len

	Set len bytes to val
	(quite fast -- can use to draw unclipped horizonal scanlines etc)


--------------------------------------------------------------------------------------------------------
	数学
--------------------------------------------------------------------------------------------------------

max x y
min x y
mid x y z

	Returns the maximum, minimum, or middle value of parameters
	For example, mid(7,5,10) returns 7

flr x

	Returns the closest integer below x // x-(x%1)
	flr(4.1)  --> 4
	flr(-2.3) --> -3.0


cos x
sin x

	Returns the cosine of x, where 1.0 indicates a full circle
	sin is inverted to suit screenspace
	e.g. sin(0.25) returns -1

	If you'd prefer radian-based trig functions without the y inversion,
	paste the following snippet near the start of your program:

	cos1 = cos function cos(angle) return cos1(angle/(3.1415*2)) end
	sin1 = sin function sin(angle) return sin1(-angle/(3.1415*2)) end


atan2 dx dy

	Converts dx, dy into an angle from 0..1
	As with cos/sin, angle is taken to run anticlockwise in screenspace
	e.g. atan(1, -1) returns 0.125

sqrt x

	Return the square root of x

abs x

	Returns the absolute (positive) value of x

rnd x
	Returns a random number n, where 0 <= n < x
	If you want an integer, use flr(rnd(x))

srand x
	Sets the random number seed
	The seed is automatically randomized on cart startup

Bitwise operations

	band x y
	bor  x y
	bxor x y
	bnot x

	shl  x y
	shr  x y

	// shifts are logicial shifts (the sign bit is not shifted)

--------------------------------------------------------------------------------------------------------
	カスタムメニューアイテム
--------------------------------------------------------------------------------------------------------

menuitem index [label callback]

	Add an extra item to the pause menu

	Index should be 1..5 and determines the order each menu item is displayed
	label should be a string up to 16 characters long
	callback is a function called when the item is selected by the users

	When no label or function is supplied, the menu item is removed

	example:
	menuitem(1, "restart puzzle", function() reset_puzzle() sfx(10) end)


--------------------------------------------------------------------------------------------------------
	文字列
--------------------------------------------------------------------------------------------------------

	s = "the quick brown fox"

	-- length

		print(#s)          --> 19


	-- joining strings

		print("three "..4) --> "three 4"


	-- sub() to grab substrings

		print(sub(s,5,9))  --> "quick"
		print(sub(s,5))  --> "quick brown fox"


--------------------------------------------------------------------------------------------
	カートリッジデータ
--------------------------------------------------------------------------------------------

	Each cartidge is able to store 64 numbers (256 bytes) of persistent data
	on the user's PICO-8 (rather than on the cart itself). This can be used as
	a lightweight way to store things like high scores or to save player progress.

	If you need more than 256 bytes, it is also possible to write directly to the
	cartridge using cstore(). The disadvantage is that the data is tied to that
	particular version of the cartridge. e.g. if a game is updated, players will
	lose their savegames.

	Another alternative is to write directly to a second cartridge by specifying
	a fourth parameter to cstore(). This requires a cart swap though (so is
	slightly slower), and leaves data-cart litter when run from a local folder.


cartdata id

	Call this once on cartridge load. id is a string up to 64 characters long, and
	should be unusual enough that other cartridges do not accidentally use the
	same id.

	e.g. cartdata("zep_jelpi")

	legal characters are a..z, 0..9 and underscore (_)

	returns true iff data was loaded.

	cartdata can not be called more than once per cartridge execution.

	Once a cartdata id has been set, the area of memory 0x5e00..0x5eff is mapped
	to permanent storage, and can either be accessed directly or via dget/dset.


dget index

	Get the number stored at index (0..63)
	Use this only after you have called cartdata()

dset index value

	Set the number stored at index (0..63)
	use this only after you have called cartdata()

	There is no need to flush written data -- it is automatically
	saved to permantent storage even if POKE()'ed directly.


------------------------------------------------------------------------------------------------------------
	バージョン履歴
------------------------------------------------------------------------------------------------------------

	v0.1.8

		Added: 60fps support
		Added: Music exporter
		Added: Custom GIF length (maximum 120 seconds)
		Added: -,+ to navigate sprite tabs, sfx, music patterns
		Added: sfx editor: navigate with home, end, pageup/down, mousewheel
		Added: <, > to modify sfx speed, or click and drag
		Added: Middle mouse button to pan around spritesheet / map
		Added: Shortcut command for splore: S
		Added: Pre-installed selection of BBS cart (use INSTALL_GAMES)
		Added: Warning when saving .p8.png with no label
		Added: (OSX) logging to ~/Library/Logs (viewable with Console.app)
		Changed: Can not CTRL-S save over a loaded bbs cart
		Changed: Only .p8 files listed by dir() and by splore
		Changed: Command history increased to 256
		Changed: exit() / shutdown() have no effect while running cart
		Fixed: Memory useage (stat(0)) inconsistent across host platforms
		Fixed: Spinny disks shows when reloading current cart with load()
		Fixed: GIF saver does not respect 64x64 / mirrored modes
		Fixed: Miscellaneous multi-line comments / strings issues
		Fixed: Empty map cels cost cpu in mapdraw()
		Fixed: mapdraw() slowdown when drawing bottom half of map
		Fixed: preprocess changes semantics when += and : operators on same line
		Fixed: Identifiers starting with underscore counted as extra token
		Fixed: Saving .png exceeding compressed code limit fails silently
		Fixed: Right-clicking a sprite does not set the currently edited sprite
		Fixed: (Windows) extra space added to pasted lines
		Fixed: spr() expensive when drawn with low negative coordinates
		Fixed: pipe character identical to colon character
		Fixed: (Raspberry Pi) shift key appends a character when entering text
		Fixed: Editor mode buttons are still clickable during cart runtime
		Fixed: When loading a .p8.png file, label is reset and needs to be re-captured
		Fixed: export() does not report failure
		Fixed: mset()'d changes in shared memory not readable via peek() / sget()
		Fixed: cstore() saving edited code
		Fixed: audio pop between patterns during music playback

	v0.1.7

		Added: menuitem()
		Added: button glyphs in code (shift-L, R, U, D, X, O)
		Added: Customisable data directory (e.g. pico8 -home mydata)
		Added: Web gpio pins: read and write pico8_gpio[] in javscript
		Fixed: SPLORE search doesn't reset
		Fixed: Splore skipping 33rd cart listing after loading more items
		Fixed: Crash when selecting a local binary file in splore
		Fixed: Semicolon can't be used as a list or statement separator
		Fixed: Exported html can not cstore self


	v0.1.6

		Added: SPLORE local & bbs cartridge explorer
		Added: setmetatable(), cocreate(), coresume(), costatus(), yield()
		Added: Spinning cart icon to show when a cart is swapped / written to
		Added: Permanent storage when carts played in a browser
		Added: Adjustable aspect ratio (-aspect 420 for 1:1)
		Changed: Lua memory limit: 1024k (was 512k)
		Changed: Music channel now resumes after being clobbered by an sfx
		Changed: Arpeggios double speed when SFX speed <= 8
		Changed: Exceeding compressed code limit does not block saving in .p8 format
		Changed: spr() half as expensive, to be consistent with map()
		Changed: Fractional hex number notation: 0x0.3 == 0x0.3000, (was 0x0.0003)
		Changed: : operator doesn't count as an extra token (same as .)
		Changed: cstore() writes directly to disk
		Changed: cstore(), reload() return number of bytes read / written
		Changed: save() while running does nothing. (use cstore() instead)
		Changed: load() while running loads and runs the specified cartridge
		Fixed: Small pops in audio mixer caused by sound wave discontinuities
		Fixed: HTML5-exported sound clicks badly under Chrome
		Fixed: Display palette is not oberserved when exporting GIFs
		Fixed: Rapid keypresses causes duplicate readings in tracker & text editor
		Fixed: += inside comments breaks preprocessor
		Fixed: sspr() cpu cost the same when clipped
		Fixed: cartdata() with bad parameters crashes
		Fixed: EXPORT from commandline can not be used without brackets and quotes


	v0.1.5

		Added: Raspberry Pi Build
		Added: Keyboard configuration for player buttons (KEYCONFIG)
		Added: Music tracker select / copy / paste
		Added: Single-level undo in audio tools
		Added: Live preview of frequencies in sound editor
		Fixed: Command history extends past last reboot
		Fixed: Sfx exporter broken
		Fixed: Slashes at end of path resolve to double slashes
		Fixed: Load cart from commandline under Windows


	v0.1.4d
	v0.1.4c

		Fixed: International character entry inserting extra characters
		Fixed: Lines with tabs have broken cursor placement and display boundary

	v0.1.4b

		Fixed: OSX command-key combinations broken

	v0.1.4

		Added: spritesheet importing and exporting with import("blah.png"), export("blah.png")
		Added: sfx exporting with export("blah%d.wav")
		Added: External cartridge parameter for reload() and cstore()
		Added: Persistent cartridge data mapped to 0x5e00
		Added: Click token limit to toggle token & char limit display
		Added: assert(), type()
		Added: P to pause
		Changed: code char limit: 64k (was 32k)
		Changed: local declarations and semicolons not counted as tokens
		Changed: Pairs of brackets and block delimitations count as one token
		Changed: Only _update() or _draw() need to exist to enter main loop
		Changed: Allow forward-slash in code editor
		Changed: info() reports current (last loaded or saved) filename
		Changed: html5 version compiled with NO_DYNAMIC_EXECUTION
		Changed: can only cstore up to 64 different files in one session
		Changed: load() automatically copies data section of cart to base ram
		Fixed: Shift-drag-copy sprites -> paste only pastes 1x1
		Fixed: ".." should count as one token
		Fixed: Tracker displaying D instead of .
		Fixed: Multi-line comments
		Fixed: Crash on run when code close to char limit
		Fixed: When over token limit, can not run any command
		Fixed: Unused high bits in SFX section not saved in .p8 format
		Fixed: Camera position memory mapping out of sync
		Fixed: pico8.txt link broken in windows installer
		Fixed: print() crashes when parameter is not a string or numbers
		Fixed: Multi-line strings & escape chars mess up tokenizer and print()
		Fixed: Joystick not responding when left stick is up to the left
		Fixed: Alt-F4 saves screenshot before quitting
		Fixed: Sprite editor mode button doesn't show fullscreen mode
		Fixed: -sound parameter not working in html5 version


	v0.1.3

		Added: paste into commandline
		Fixed: lua standard libraries accessible
		Fixed: command-line loading doesn't work
		Fixed: music pattern finished too early when all tracks set to looping
		Fixed: peek()ing odd bytes in sfx address space masks bit 7
		Fixed: cstore and reload from code space should have no effect

	v0.1.2

		Added: html5 cartridge exporter
		Added: Cartridge save data (64 fixed point numbers)
		Added: 8-player input
		Added: Demo carts: COLLIDE and BUTTERFLY
		Added: Command-line parameters // load cart, -run, settings
		Added: Alternative function keys (F6..F9 aliased as F1..F4)
		Added: pairs()
		Added: printh() for debugging
		Added: Tab completion for filenames in console
		Added: stack trace on runtime error
		Changed: music pattern length taken to be first non-looping channel's length
		Changed: noise instrument (6) has low frequency white noise scaled by volume
		Changed: screenshot captures whole window contents at display resolution
		Changed: del() moves remaining items up one index to maintain a packed table
		Changed: add(),del(),count(),all() no longer store extra fields
		Changed: removed count() from docs -- now just a legacy function. Use # operator instead.
		Changed: cursor only blinks while window is active
		Changed: peek(), poke() and binary operations (band()..) have no function call overhead
		Changed: yellow slightly warmer
		Changed: No camera snapping after pan in map mode
		Fixed: sqrt() crashing for 0 or >= 32761
		Fixed: Semi-colon characters in text editor
		Fixed: Long lines split when saving in .p8 format
		Fixed: pget() does not respect camera position
		Fixed: Error message when peeking or poking outside of legal address space
		Fixed: Search replace colour fills one pixel outside of selected region
		Fixed: Playing an empty music pattern breaks subsequent music playback
		Fixed: Invalid sfx editing state on startup
		Fixed: Painting instruments values in frequency view also sets volumes
		Fixed: Inconsistent gif recording speeds
		Fixed: Unmapped joystick support
		Fixed: Compressed code size sometimes larger than uncompressed
		Fixed: mid() fails when first argument is not smallest
		Fixed: Scroll wheel changes sprite/map zoom while in code editor
		Fixed: CTRL-R (quick-run) drawing over current line in command mode
		Fixed: Label capture (F7) does not respect screen palette state
		Fixed: Syntax highlighting of api functions and hex numbers
		Fixed: Looping to 0 with negative step finishes at 1
		Fixed: nil values printed as false instead of nil
		Fixed: Hexedecimal fractional parts
		Fixed: btnp() unresponsive when skipping frames
		Fixed: Editing mode is lost when using ctrl-r to run
		Fixed: Tracker note entry keys mapped, messing up piano-like layout
		Fixed: Shared gfx/map memory out of sync after some editor operations
		Fixed: Alt-gr character entry
		Fixed: Can map display palette to entries >= 16 using poke()
		Fixed: Using shift to select in code editor has wrong selection range
		Fixed: Dragging above top of text causes selection to flip to end
		Fixed: Duplicate at end of file listing


	v0.1.1

		Added: Token-based code limiting (8192 tokens, 32k ascii text)
		Added: Freeform move, pan and selection in sprite and map editors
		Added: Flood-fill tool (sprite and map)
		Added: .GIF saver
		Added: CTRL-Stamp to stamp with transparency
		Added: Single-step undo for map and sprites
		Added: 2x2 brush
		Added: sqrt(), atan2()
		Added: CTRL-S to quick-save
		Added: CTRL-R reloads .p8 file and runs (useful for external text editing)
		Added: Automatic backups on overwriting or quitting without saving
		Added: Scroll wheel zooms in sprite editor
		Added: Customisable resolution //  e.g. pico8 -width 580
		Added: Strings highlighted as green
		Added: ALT-click can optionally simulate right click (see config.txt)
		Added: palt() to control transparency for spr(), sspr()
		Added: info()
		Changed: load() tries adding .p8.png, .png if file doesn't exist
		Changed: Draw operations apply only to selection when active
		Changed: Move operations (cursors) apply to selection if present
		Changed: Removed time()
		Changed: Random seed is random on cart startup
		Changed: api functions never read directly from cart rom
		Changed: sspr() can take negative values for dw, dh
		Fixed: Sparse table indexing with integers fails
		Fixed: Assignment operators and shortform if-then-else failing
		Fixed: sspr() failed when w0 == 128
		Fixed: Circle drawing broken when camera not (0,0)
		Fixed: CPU hogging
		Fixed: Noise instrument clobbers rnd() sequence
		Fixed: Audio system not resetting on program reset
		Fixed: % operator sometimes wrong for negative values
		Fixed: Length operator (#)
		Fixed: Power operator (^)
		Fixed: Line clipping bug on right and bottom edges
		Fixed: print() precision for whole numbers
		Fixed: print() broken for negative y values
		Fixed: tokenization and keyword highlighting
		Fixed: sprite properties not copied/pasted
		Fixed: Only sfx 0..32 could be used as music patterns
		Fixed: Saving and loading a .p8 file adds newline to end of code
		Fixed: Drag selection to left margin in code editor -> selects all


	v0.1.0

		Added: demo cart: hello.p8 (use install_demos)
		Added: CTRL-R from anywhere to run cart or restart cart
		Added: use a,s to select colour in gfx editor
		Added: black background behind
		Added: consistent operation cpu costs
		Added: btn(), btnp() with no arguments returns bitfield
		Added: fget(id) returns bitfield of that sprite's flags
		Changed: renamed mapdraw() to map() for consistency
		Changed: default sleep time is 5ms (better cpu consumption for laptops)
		Fixed: memory limiter
		Fixed: wonky line and circle drawing
		Fixed: shift-click volume in sfx editor to set all
		Fixed: number formatting is now never in scientific notation
		Fixed: clipped error messages in console
		Fixed: text undo stores rollback points when chaning line number
		Fixed: print(str) carriage returns to previous x


	v0.0.5

		Added: help()
		Added: Ctrl+F / Ctrl+G to search for text, repeat search
		Added: del key in code editor
		Added: Short-hand single-line IF statements
		Added: Unary operators += -= /= *= %=
		Added: srand(), time(), added rnd() to docs
		Added: Ctrl+D to duplicate line
		Added: interactive ls() for multi-page file listings
		Added: band() bor() bxor() bnot() shl() shr()
		Added: runtime error line number
		Added: dir() (aliased to ls())
		Changed: print() only autoscrolls when called with no parameters
		Changed: alt+up/down to skip between function definitions (was ctrl)
		Changed: sspr() dw, dh defaults to sw, sh
		Fixed: Load crashes on files that are not .p8 format or directories
		Fixed: Misc editor cursor position glitches
		Fixed: Crash when syntax error occurs before viewing code
		Fixed: Broken newlines after rebooting
		Fixed: mkdir() called with no parameters creating "(null)" directory
		Fixed: scrolling past top of code with scrollwheel
		Fixed: alt-f4 to fastquit


	v0.0.4

		Added: Jelpi demo cart
		Added: Internal carts // use install_demos()
		Added: Joystick support
		Added: Undo/redo in code editor
		Added: Scroll wheel in code editor
		Added: LCTRL + UP/DOWN to navigate functions in code editor
		Added: LALT + LEFT/RIGHT to switch editing modes
		Added: btnp()
		Added: Release looping sample (a in editor , sfx(-2, channel) in code)
		Changed: Music stops when pausing program execution
		Changed: Allow 8 settable sprite flags
		Changed: Made noise instrument more bassy
		Fixed: Home, end keys
		Fixed: Sprite flags 4,5 not saved
		Fixed: mset() discarding 4 high bits
		Fixed: Crash when highlighting long strings


	v0.0.3

		Added: Palette mapping type 1 (on display)
		Added: Collections can be initialized with c={1,2,..}
		Added: holdframe() // used automatically by _draw(), update()
		Added: Sprite selections and operations across selections
		Added: Map selection and stamp tool
		Added: Immediate mode screen buffer preserved while switching views
		Added: Channel mask for music playback
		Added: Memory mapping for live sound data
		Added: .png cart format
		Added: Sprite navigation by keyboard (-, +)
		Fixed: Strict 4-channel sound
		Fixed: Automatic sfx channel selection (channel index: -1)


	v0.0.2

		Added: Command history
		Added: P2 keys
		Added: Boot sequence
		Added: Windows, 64-bit linux builds
		Added: CPU cost of internal api functions
		Added: Separate song channel index and mute status
		Added: Memory mapping
		Added: Search/replace colour in sprite editor
		Added: Copy/paste sprites and map regions
		Improved: Immediate mode command editing
		Improved: Editor cursor behaviour
		Fixed: Automatic audio channel selection


	v0.0.1

		First Alpha
